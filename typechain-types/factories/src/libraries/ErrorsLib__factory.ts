/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ErrorsLib,
  ErrorsLibInterface,
} from "../../../src/libraries/ErrorsLib";

const _abi = [
  {
    inputs: [],
    name: "Error_ADD_COLLATERAL_PAUSED",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_ADD_LIQUIDITY_PAUSED",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_ALREADY_SET",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_BORROW_PAUSED",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_CALLER_NOT_GOVERNOR",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_CALLER_NOT_GOVERNOR_OR_APPROVED",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_CALLER_NOT_MARKET_GOVERNOR",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_CALLER_NOT_PROTOCOL_GOVERNOR",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_FEE_NOT_SET",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_HEALTHY_POSITION",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_INCONSISTENT_INPUT",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_INSUFFICIENT_COLLATERAL",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_INSUFFICIENT_LIQUIDITY",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_INVALID_LLTV_VALUE",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_INVALID_NONCE",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_INVALID_PRICE",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_INVALID_RISK_TIER",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_INVALID_SIGNATURE",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_IRM_NOT_ENABLED",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_LIQUIDATE_PAUSED",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_LLTV_NOT_ENABLED",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_MARKET_ALREADY_CREATED",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_MARKET_NOT_CREATED",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_MAX_FEE_EXCEEDED",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_MAX_LLTV_EXCEEDED",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_MAX_UINT128_EXCEEDED",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_NOT_OWNER",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_NOT_SPATHA",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_NO_CODE",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_REPAY_PAUSED",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_SIGNATURE_EXPIRED",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_TRANSFER_FROM_RETURNED_FALSE",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_TRANSFER_FROM_REVERTED",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_TRANSFER_RETURNED_FALSE",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_TRANSFER_REVERTED",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_UNAUTHORIZED",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_WITHDRAW_COLLATERAL_PAUSED",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_WITHDRAW_LIQUIDITY_PAUSED",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_ZERO_ADDRESS",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_ZERO_ASSETS",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e054de6e5eb5cfc18b7ace6ba331ce7dc4da44bc3db7cfd1ea6c411b82b59cf464736f6c63430008180033";

type ErrorsLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ErrorsLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ErrorsLib__factory extends ContractFactory {
  constructor(...args: ErrorsLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ErrorsLib & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ErrorsLib__factory {
    return super.connect(runner) as ErrorsLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ErrorsLibInterface {
    return new Interface(_abi) as ErrorsLibInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ErrorsLib {
    return new Contract(address, _abi, runner) as unknown as ErrorsLib;
  }
}
