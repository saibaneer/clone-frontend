/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  TreasuryVesterErrors,
  TreasuryVesterErrorsInterface,
} from "../../../../src/vesting/libraries/TreasuryVesterErrors";

const _abi = [
  {
    inputs: [],
    name: "Error_Cannot_Claim_Before_Vesting_Cliff",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_Insufficient_Balance_For_VestingAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_Unauthorised_Caller",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_Vesting_Cliff_Too_Early",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_Vesting_Contract_Already_Exists",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_Vesting_End_Too_Early",
    type: "error",
  },
  {
    inputs: [],
    name: "Error_Zero_Address",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d318bd06c77dee4ade83336244560244f51731ce57f7825744092736eae9dda164736f6c63430008180033";

type TreasuryVesterErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TreasuryVesterErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TreasuryVesterErrors__factory extends ContractFactory {
  constructor(...args: TreasuryVesterErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TreasuryVesterErrors & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): TreasuryVesterErrors__factory {
    return super.connect(runner) as TreasuryVesterErrors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TreasuryVesterErrorsInterface {
    return new Interface(_abi) as TreasuryVesterErrorsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TreasuryVesterErrors {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as TreasuryVesterErrors;
  }
}
