/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  LogarithmicVotingStrategy,
  LogarithmicVotingStrategyInterface,
} from "../../../../src/governance/voting-strategies/LogarithmicVotingStrategy";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "voterPower",
        type: "uint256",
      },
    ],
    name: "calculateVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610148806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806390ac3ccf14610030575b600080fd5b61004361003e3660046100aa565b610055565b60405190815260200160405180910390f35b60008160000361006757506000919050565b61007082610079565b60ff1692915050565b6000805b610088600a846100c3565b925082156100a4578061009a816100e5565b915050600161007d575b92915050565b6000602082840312156100bc57600080fd5b5035919050565b6000826100e057634e487b7160e01b600052601260045260246000fd5b500490565b600060ff821660ff810361010957634e487b7160e01b600052601160045260246000fd5b6001019291505056fea264697066735822122039a3d956631b58c95022ea0aca2ebd1babab7f2f045c4b7252d31d24baf1594264736f6c63430008180033";

type LogarithmicVotingStrategyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LogarithmicVotingStrategyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LogarithmicVotingStrategy__factory extends ContractFactory {
  constructor(...args: LogarithmicVotingStrategyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      LogarithmicVotingStrategy & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): LogarithmicVotingStrategy__factory {
    return super.connect(runner) as LogarithmicVotingStrategy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LogarithmicVotingStrategyInterface {
    return new Interface(_abi) as LogarithmicVotingStrategyInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): LogarithmicVotingStrategy {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as LogarithmicVotingStrategy;
  }
}
