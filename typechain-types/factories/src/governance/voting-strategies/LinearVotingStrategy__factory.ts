/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  LinearVotingStrategy,
  LinearVotingStrategyInterface,
} from "../../../../src/governance/voting-strategies/LinearVotingStrategy";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "voterPower",
        type: "uint256",
      },
    ],
    name: "calculateVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50609b8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806390ac3ccf14602d575b600080fd5b603b6038366004604d565b90565b60405190815260200160405180910390f35b600060208284031215605e57600080fd5b503591905056fea26469706673582212203afbc62a0eef2b7c28b0dc2fb867fa5eff16bad33b77b4f4f92e4b59317e649464736f6c63430008180033";

type LinearVotingStrategyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LinearVotingStrategyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LinearVotingStrategy__factory extends ContractFactory {
  constructor(...args: LinearVotingStrategyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      LinearVotingStrategy & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): LinearVotingStrategy__factory {
    return super.connect(runner) as LinearVotingStrategy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LinearVotingStrategyInterface {
    return new Interface(_abi) as LinearVotingStrategyInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): LinearVotingStrategy {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as LinearVotingStrategy;
  }
}
