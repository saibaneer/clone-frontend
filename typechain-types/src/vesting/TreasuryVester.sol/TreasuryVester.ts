/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface TreasuryVesterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claim"
      | "delegate"
      | "getAmountToClaim"
      | "initialize"
      | "lastUpdate"
      | "recipient"
      | "setRecipient"
      | "vestingAmount"
      | "vestingBegin"
      | "vestingCliff"
      | "vestingEnd"
      | "vestingToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "LogVestingTokenClaimed"
      | "LogVestingTokenRecipientChanged"
  ): EventFragment;

  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountToClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "recipient", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingBegin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingCliff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingToken",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountToClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastUpdate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recipient", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingBegin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingCliff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vestingEnd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vestingToken",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogVestingTokenClaimedEvent {
  export type InputTuple = [
    recipient: AddressLike,
    amountClaimed: BigNumberish
  ];
  export type OutputTuple = [recipient: string, amountClaimed: bigint];
  export interface OutputObject {
    recipient: string;
    amountClaimed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogVestingTokenRecipientChangedEvent {
  export type InputTuple = [old: AddressLike, current: AddressLike];
  export type OutputTuple = [old: string, current: string];
  export interface OutputObject {
    old: string;
    current: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TreasuryVester extends BaseContract {
  connect(runner?: ContractRunner | null): TreasuryVester;
  waitForDeployment(): Promise<this>;

  interface: TreasuryVesterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claim: TypedContractMethod<[], [void], "nonpayable">;

  delegate: TypedContractMethod<
    [delegatee_: AddressLike],
    [void],
    "nonpayable"
  >;

  getAmountToClaim: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [
      vestingToken_: AddressLike,
      recipient_: AddressLike,
      vestingAmount_: BigNumberish,
      vestingBegin_: BigNumberish,
      vestingCliff_: BigNumberish,
      vestingEnd_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  lastUpdate: TypedContractMethod<[], [bigint], "view">;

  recipient: TypedContractMethod<[], [string], "view">;

  setRecipient: TypedContractMethod<
    [recipient_: AddressLike],
    [void],
    "nonpayable"
  >;

  vestingAmount: TypedContractMethod<[], [bigint], "view">;

  vestingBegin: TypedContractMethod<[], [bigint], "view">;

  vestingCliff: TypedContractMethod<[], [bigint], "view">;

  vestingEnd: TypedContractMethod<[], [bigint], "view">;

  vestingToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delegate"
  ): TypedContractMethod<[delegatee_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAmountToClaim"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      vestingToken_: AddressLike,
      recipient_: AddressLike,
      vestingAmount_: BigNumberish,
      vestingBegin_: BigNumberish,
      vestingCliff_: BigNumberish,
      vestingEnd_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lastUpdate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "recipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setRecipient"
  ): TypedContractMethod<[recipient_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vestingAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "vestingBegin"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "vestingCliff"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "vestingEnd"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "vestingToken"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LogVestingTokenClaimed"
  ): TypedContractEvent<
    LogVestingTokenClaimedEvent.InputTuple,
    LogVestingTokenClaimedEvent.OutputTuple,
    LogVestingTokenClaimedEvent.OutputObject
  >;
  getEvent(
    key: "LogVestingTokenRecipientChanged"
  ): TypedContractEvent<
    LogVestingTokenRecipientChangedEvent.InputTuple,
    LogVestingTokenRecipientChangedEvent.OutputTuple,
    LogVestingTokenRecipientChangedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LogVestingTokenClaimed(address,uint256)": TypedContractEvent<
      LogVestingTokenClaimedEvent.InputTuple,
      LogVestingTokenClaimedEvent.OutputTuple,
      LogVestingTokenClaimedEvent.OutputObject
    >;
    LogVestingTokenClaimed: TypedContractEvent<
      LogVestingTokenClaimedEvent.InputTuple,
      LogVestingTokenClaimedEvent.OutputTuple,
      LogVestingTokenClaimedEvent.OutputObject
    >;

    "LogVestingTokenRecipientChanged(address,address)": TypedContractEvent<
      LogVestingTokenRecipientChangedEvent.InputTuple,
      LogVestingTokenRecipientChangedEvent.OutputTuple,
      LogVestingTokenRecipientChangedEvent.OutputObject
    >;
    LogVestingTokenRecipientChanged: TypedContractEvent<
      LogVestingTokenRecipientChangedEvent.InputTuple,
      LogVestingTokenRecipientChangedEvent.OutputTuple,
      LogVestingTokenRecipientChangedEvent.OutputObject
    >;
  };
}
