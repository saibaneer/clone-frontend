/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type MarketParamsStruct = {
  loanToken: AddressLike;
  collateralToken: AddressLike;
  riskTier: BigNumberish;
  lltv: BigNumberish;
  irm: AddressLike;
};

export type MarketParamsStructOutput = [
  loanToken: string,
  collateralToken: string,
  riskTier: bigint,
  lltv: bigint,
  irm: string
] & {
  loanToken: string;
  collateralToken: string;
  riskTier: bigint;
  lltv: bigint;
  irm: string;
};

export type MarketCreationParamsStruct = {
  loanToken: AddressLike;
  collateralToken: AddressLike;
  riskTier: BigNumberish;
};

export type MarketCreationParamsStructOutput = [
  loanToken: string,
  collateralToken: string,
  riskTier: bigint
] & { loanToken: string; collateralToken: string; riskTier: bigint };

export type PauseStatusesStruct = {
  isAddLiquidityPaused: boolean;
  isAddCollateralPaused: boolean;
  isBorrowPaused: boolean;
  isWithdrawLiquidityPaused: boolean;
  isWithdrawCollateralPaused: boolean;
  isRepayPaused: boolean;
  isLiquidatePaused: boolean;
};

export type PauseStatusesStructOutput = [
  isAddLiquidityPaused: boolean,
  isAddCollateralPaused: boolean,
  isBorrowPaused: boolean,
  isWithdrawLiquidityPaused: boolean,
  isWithdrawCollateralPaused: boolean,
  isRepayPaused: boolean,
  isLiquidatePaused: boolean
] & {
  isAddLiquidityPaused: boolean;
  isAddCollateralPaused: boolean;
  isBorrowPaused: boolean;
  isWithdrawLiquidityPaused: boolean;
  isWithdrawCollateralPaused: boolean;
  isRepayPaused: boolean;
  isLiquidatePaused: boolean;
};

export type MarketStruct = {
  totalSupplyAssets: BigNumberish;
  totalSupplyShares: BigNumberish;
  totalBorrowAssets: BigNumberish;
  totalBorrowShares: BigNumberish;
  lastUpdate: BigNumberish;
  fee: BigNumberish;
  pauseStatuses: PauseStatusesStruct;
};

export type MarketStructOutput = [
  totalSupplyAssets: bigint,
  totalSupplyShares: bigint,
  totalBorrowAssets: bigint,
  totalBorrowShares: bigint,
  lastUpdate: bigint,
  fee: bigint,
  pauseStatuses: PauseStatusesStructOutput
] & {
  totalSupplyAssets: bigint;
  totalSupplyShares: bigint;
  totalBorrowAssets: bigint;
  totalBorrowShares: bigint;
  lastUpdate: bigint;
  fee: bigint;
  pauseStatuses: PauseStatusesStructOutput;
};

export interface SpathaInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOMAIN_SEPARATOR"
      | "accrueInterest"
      | "addCollateral"
      | "addLiquidity"
      | "borrow"
      | "createMarket"
      | "feeRecipient"
      | "fees"
      | "flashLoan"
      | "getCollateralPrice"
      | "getExpectedBorrowAssets"
      | "getExpectedMarketBalances"
      | "getExpectedSupplyAssets"
      | "getExpectedTotalBorrowAssets"
      | "getExpectedTotalSupplyAssets"
      | "getExpectedTotalSupplyShares"
      | "getLltvBounds"
      | "getMarketBalances"
      | "getMarketIdWithMarketCreationParams"
      | "getMarketIdWithMarketParams"
      | "getMarketParams"
      | "getMarketsCreated"
      | "getPosition"
      | "idToMarketParams"
      | "irmAddressProvider"
      | "isApproved"
      | "liquidate"
      | "market"
      | "marketGovernor"
      | "multicall"
      | "nonce"
      | "position"
      | "priceOracle"
      | "protocolGovernor"
      | "repay"
      | "setApproved"
      | "setBorrowRate"
      | "setBorrowRateThresholds"
      | "setDefaultMarketFee"
      | "setFeeRecipient"
      | "setIrmAddress"
      | "setIsAddCollateralPaused"
      | "setIsAddLiquidityPaused"
      | "setIsBorrowPaused"
      | "setIsClaimRewardsPaused"
      | "setIsLiquidatePaused"
      | "setIsPaused"
      | "setIsRepayPaused"
      | "setIsWithdrawCollateralPaused"
      | "setIsWithdrawLiquidityPaused"
      | "setMarketFee"
      | "setMarketIrm"
      | "setMarketLltv"
      | "setPriceOracle"
      | "transferGovernance"
      | "withdrawCollateral"
      | "withdrawLiquidity"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LogAccrueInterest"
      | "LogAddCollateral"
      | "LogAddLiquidity"
      | "LogBorrow"
      | "LogCreateMarket"
      | "LogDefaultFeeChanged"
      | "LogFeeChanged"
      | "LogFlashLoan"
      | "LogIsAddCollateralPausedSet"
      | "LogIsAddLiquidityPausedSet"
      | "LogIsBorrowPausedSet"
      | "LogIsClaimRewardsPausedSet"
      | "LogIsLiquidatePausedSet"
      | "LogIsMarketPausedSet"
      | "LogIsRepayPausedSet"
      | "LogIsWithdrawCollateralPausedSet"
      | "LogIsWithdrawLiquidityPausedSet"
      | "LogLiquidate"
      | "LogMarketGovernorSet"
      | "LogPriceOracleSet"
      | "LogProtocolGovernorSet"
      | "LogRepay"
      | "LogSetApproved"
      | "LogSetFeeRecipient"
      | "LogSetIRM"
      | "LogSetLltv"
      | "LogSetMarketIRM"
      | "LogWithdrawCollateral"
      | "LogWithdrawLiquidity"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accrueInterest",
    values: [MarketCreationParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "addCollateral",
    values: [MarketCreationParamsStruct, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      MarketCreationParamsStruct,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [
      MarketCreationParamsStruct,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarket",
    values: [MarketCreationParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fees", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralPrice",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpectedBorrowAssets",
    values: [MarketParamsStruct, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpectedMarketBalances",
    values: [MarketParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpectedSupplyAssets",
    values: [MarketParamsStruct, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpectedTotalBorrowAssets",
    values: [MarketParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpectedTotalSupplyAssets",
    values: [MarketParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpectedTotalSupplyShares",
    values: [MarketParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getLltvBounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketBalances",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketIdWithMarketCreationParams",
    values: [MarketCreationParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketIdWithMarketParams",
    values: [MarketParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketParams",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketsCreated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "idToMarketParams",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "irmAddressProvider",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApproved",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [
      MarketCreationParamsStruct,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "market", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "marketGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "nonce", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "position",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [
      MarketCreationParamsStruct,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApproved",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowRate",
    values: [MarketParamsStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowRateThresholds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultMarketFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setIrmAddress",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsAddCollateralPaused",
    values: [MarketParamsStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsAddLiquidityPaused",
    values: [MarketParamsStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsBorrowPaused",
    values: [MarketParamsStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsClaimRewardsPaused",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsLiquidatePaused",
    values: [MarketParamsStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsPaused",
    values: [MarketParamsStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsRepayPaused",
    values: [MarketParamsStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsWithdrawCollateralPaused",
    values: [MarketParamsStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsWithdrawLiquidityPaused",
    values: [MarketParamsStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketFee",
    values: [MarketParamsStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketIrm",
    values: [MarketParamsStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketLltv",
    values: [MarketParamsStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferGovernance",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [MarketCreationParamsStruct, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidity",
    values: [
      MarketCreationParamsStruct,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accrueInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpectedBorrowAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpectedMarketBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpectedSupplyAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpectedTotalBorrowAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpectedTotalSupplyAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpectedTotalSupplyShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLltvBounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketIdWithMarketCreationParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketIdWithMarketParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketsCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "idToMarketParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "irmAddressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isApproved", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "market", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "position", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowRateThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultMarketFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIrmAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsAddCollateralPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsAddLiquidityPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsBorrowPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsClaimRewardsPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsLiquidatePaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsRepayPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsWithdrawCollateralPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsWithdrawLiquidityPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketIrm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketLltv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;
}

export namespace LogAccrueInterestEvent {
  export type InputTuple = [
    id: BytesLike,
    prevBorrowRate: BigNumberish,
    interest: BigNumberish,
    feeShares: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    prevBorrowRate: bigint,
    interest: bigint,
    feeShares: bigint
  ];
  export interface OutputObject {
    id: string;
    prevBorrowRate: bigint;
    interest: bigint;
    feeShares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogAddCollateralEvent {
  export type InputTuple = [
    id: BytesLike,
    caller: AddressLike,
    onBehalf: AddressLike,
    assets: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    caller: string,
    onBehalf: string,
    assets: bigint
  ];
  export interface OutputObject {
    id: string;
    caller: string;
    onBehalf: string;
    assets: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogAddLiquidityEvent {
  export type InputTuple = [
    id: BytesLike,
    caller: AddressLike,
    onBehalf: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    caller: string,
    onBehalf: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    id: string;
    caller: string;
    onBehalf: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogBorrowEvent {
  export type InputTuple = [
    id: BytesLike,
    caller: AddressLike,
    onBehalf: AddressLike,
    receiver: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    caller: string,
    onBehalf: string,
    receiver: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    id: string;
    caller: string;
    onBehalf: string;
    receiver: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogCreateMarketEvent {
  export type InputTuple = [id: BytesLike, marketParams: MarketParamsStruct];
  export type OutputTuple = [
    id: string,
    marketParams: MarketParamsStructOutput
  ];
  export interface OutputObject {
    id: string;
    marketParams: MarketParamsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogDefaultFeeChangedEvent {
  export type InputTuple = [riskTier: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [riskTier: bigint, newFee: bigint];
  export interface OutputObject {
    riskTier: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogFeeChangedEvent {
  export type InputTuple = [id: BytesLike, newFee: BigNumberish];
  export type OutputTuple = [id: string, newFee: bigint];
  export interface OutputObject {
    id: string;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogFlashLoanEvent {
  export type InputTuple = [
    caller: AddressLike,
    token: AddressLike,
    assets: BigNumberish
  ];
  export type OutputTuple = [caller: string, token: string, assets: bigint];
  export interface OutputObject {
    caller: string;
    token: string;
    assets: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogIsAddCollateralPausedSetEvent {
  export type InputTuple = [id: BytesLike, isPaused: boolean];
  export type OutputTuple = [id: string, isPaused: boolean];
  export interface OutputObject {
    id: string;
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogIsAddLiquidityPausedSetEvent {
  export type InputTuple = [id: BytesLike, isPaused: boolean];
  export type OutputTuple = [id: string, isPaused: boolean];
  export interface OutputObject {
    id: string;
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogIsBorrowPausedSetEvent {
  export type InputTuple = [id: BytesLike, isPaused: boolean];
  export type OutputTuple = [id: string, isPaused: boolean];
  export interface OutputObject {
    id: string;
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogIsClaimRewardsPausedSetEvent {
  export type InputTuple = [isPaused: boolean];
  export type OutputTuple = [isPaused: boolean];
  export interface OutputObject {
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogIsLiquidatePausedSetEvent {
  export type InputTuple = [id: BytesLike, isPaused: boolean];
  export type OutputTuple = [id: string, isPaused: boolean];
  export interface OutputObject {
    id: string;
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogIsMarketPausedSetEvent {
  export type InputTuple = [id: BytesLike, isPaused: boolean];
  export type OutputTuple = [id: string, isPaused: boolean];
  export interface OutputObject {
    id: string;
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogIsRepayPausedSetEvent {
  export type InputTuple = [id: BytesLike, isPaused: boolean];
  export type OutputTuple = [id: string, isPaused: boolean];
  export interface OutputObject {
    id: string;
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogIsWithdrawCollateralPausedSetEvent {
  export type InputTuple = [id: BytesLike, isPaused: boolean];
  export type OutputTuple = [id: string, isPaused: boolean];
  export interface OutputObject {
    id: string;
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogIsWithdrawLiquidityPausedSetEvent {
  export type InputTuple = [id: BytesLike, isPaused: boolean];
  export type OutputTuple = [id: string, isPaused: boolean];
  export interface OutputObject {
    id: string;
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogLiquidateEvent {
  export type InputTuple = [
    id: BytesLike,
    caller: AddressLike,
    borrower: AddressLike,
    repaidAssets: BigNumberish,
    repaidShares: BigNumberish,
    seizedAssets: BigNumberish,
    badDebtAssets: BigNumberish,
    badDebtShares: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    caller: string,
    borrower: string,
    repaidAssets: bigint,
    repaidShares: bigint,
    seizedAssets: bigint,
    badDebtAssets: bigint,
    badDebtShares: bigint
  ];
  export interface OutputObject {
    id: string;
    caller: string;
    borrower: string;
    repaidAssets: bigint;
    repaidShares: bigint;
    seizedAssets: bigint;
    badDebtAssets: bigint;
    badDebtShares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogMarketGovernorSetEvent {
  export type InputTuple = [oldGovernor: AddressLike, newGovernor: AddressLike];
  export type OutputTuple = [oldGovernor: string, newGovernor: string];
  export interface OutputObject {
    oldGovernor: string;
    newGovernor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogPriceOracleSetEvent {
  export type InputTuple = [priceOracle: AddressLike];
  export type OutputTuple = [priceOracle: string];
  export interface OutputObject {
    priceOracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogProtocolGovernorSetEvent {
  export type InputTuple = [oldGovernor: AddressLike, newGovernor: AddressLike];
  export type OutputTuple = [oldGovernor: string, newGovernor: string];
  export interface OutputObject {
    oldGovernor: string;
    newGovernor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogRepayEvent {
  export type InputTuple = [
    id: BytesLike,
    caller: AddressLike,
    onBehalf: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    caller: string,
    onBehalf: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    id: string;
    caller: string;
    onBehalf: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogSetApprovedEvent {
  export type InputTuple = [
    caller: AddressLike,
    owner: AddressLike,
    approved: AddressLike,
    newIsApproved: boolean
  ];
  export type OutputTuple = [
    caller: string,
    owner: string,
    approved: string,
    newIsApproved: boolean
  ];
  export interface OutputObject {
    caller: string;
    owner: string;
    approved: string;
    newIsApproved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogSetFeeRecipientEvent {
  export type InputTuple = [newFeeRecipient: AddressLike];
  export type OutputTuple = [newFeeRecipient: string];
  export interface OutputObject {
    newFeeRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogSetIRMEvent {
  export type InputTuple = [irm: AddressLike, mode: BigNumberish];
  export type OutputTuple = [irm: string, mode: bigint];
  export interface OutputObject {
    irm: string;
    mode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogSetLltvEvent {
  export type InputTuple = [id: BytesLike, lltv: BigNumberish];
  export type OutputTuple = [id: string, lltv: bigint];
  export interface OutputObject {
    id: string;
    lltv: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogSetMarketIRMEvent {
  export type InputTuple = [id: BytesLike, mode: BigNumberish];
  export type OutputTuple = [id: string, mode: bigint];
  export interface OutputObject {
    id: string;
    mode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogWithdrawCollateralEvent {
  export type InputTuple = [
    id: BytesLike,
    caller: AddressLike,
    onBehalf: AddressLike,
    receiver: AddressLike,
    assets: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    caller: string,
    onBehalf: string,
    receiver: string,
    assets: bigint
  ];
  export interface OutputObject {
    id: string;
    caller: string;
    onBehalf: string;
    receiver: string;
    assets: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogWithdrawLiquidityEvent {
  export type InputTuple = [
    id: BytesLike,
    caller: AddressLike,
    onBehalf: AddressLike,
    receiver: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    caller: string,
    onBehalf: string,
    receiver: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    id: string;
    caller: string;
    onBehalf: string;
    receiver: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Spatha extends BaseContract {
  connect(runner?: ContractRunner | null): Spatha;
  waitForDeployment(): Promise<this>;

  interface: SpathaInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  accrueInterest: TypedContractMethod<
    [marketCreationParams: MarketCreationParamsStruct],
    [void],
    "nonpayable"
  >;

  addCollateral: TypedContractMethod<
    [
      marketCreationParams: MarketCreationParamsStruct,
      assets: BigNumberish,
      onBehalf: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  addLiquidity: TypedContractMethod<
    [
      marketCreationParams: MarketCreationParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      onBehalf: AddressLike
    ],
    [[bigint, bigint] & { assetsAdded: bigint; sharesMinted: bigint }],
    "nonpayable"
  >;

  borrow: TypedContractMethod<
    [
      marketCreationParams: MarketCreationParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      onBehalf: AddressLike,
      receiver: AddressLike
    ],
    [[bigint, bigint] & { assetsBorrowed: bigint; sharesBorrowed: bigint }],
    "nonpayable"
  >;

  createMarket: TypedContractMethod<
    [marketCreationParams: MarketCreationParamsStruct],
    [void],
    "nonpayable"
  >;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  fees: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  flashLoan: TypedContractMethod<
    [token: AddressLike, assets: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCollateralPrice: TypedContractMethod<
    [collateralToken: AddressLike, loanToken: AddressLike],
    [bigint],
    "view"
  >;

  getExpectedBorrowAssets: TypedContractMethod<
    [marketParams: MarketParamsStruct, user: AddressLike],
    [bigint],
    "view"
  >;

  getExpectedMarketBalances: TypedContractMethod<
    [marketParams: MarketParamsStruct],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;

  getExpectedSupplyAssets: TypedContractMethod<
    [marketParams: MarketParamsStruct, user: AddressLike],
    [bigint],
    "view"
  >;

  getExpectedTotalBorrowAssets: TypedContractMethod<
    [marketParams: MarketParamsStruct],
    [bigint],
    "view"
  >;

  getExpectedTotalSupplyAssets: TypedContractMethod<
    [marketParams: MarketParamsStruct],
    [bigint],
    "view"
  >;

  getExpectedTotalSupplyShares: TypedContractMethod<
    [marketParams: MarketParamsStruct],
    [bigint],
    "view"
  >;

  getLltvBounds: TypedContractMethod<
    [riskTier: BigNumberish],
    [[bigint, bigint] & { min: bigint; max: bigint }],
    "view"
  >;

  getMarketBalances: TypedContractMethod<
    [id: BytesLike],
    [MarketStructOutput],
    "view"
  >;

  getMarketIdWithMarketCreationParams: TypedContractMethod<
    [marketCreationParams: MarketCreationParamsStruct],
    [string],
    "view"
  >;

  getMarketIdWithMarketParams: TypedContractMethod<
    [marketParams: MarketParamsStruct],
    [string],
    "view"
  >;

  getMarketParams: TypedContractMethod<
    [id: BytesLike],
    [MarketParamsStructOutput],
    "view"
  >;

  getMarketsCreated: TypedContractMethod<[], [string[]], "view">;

  getPosition: TypedContractMethod<
    [id: BytesLike, account: AddressLike],
    [
      [bigint, bigint, bigint] & {
        supplyShares: bigint;
        borrowShares: bigint;
        collateral: bigint;
      }
    ],
    "view"
  >;

  idToMarketParams: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, bigint, string] & {
        loanToken: string;
        collateralToken: string;
        riskTier: bigint;
        lltv: bigint;
        irm: string;
      }
    ],
    "view"
  >;

  irmAddressProvider: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  isApproved: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  liquidate: TypedContractMethod<
    [
      marketCreationParams: MarketCreationParamsStruct,
      borrower: AddressLike,
      seizedAssets: BigNumberish,
      repaidShares: BigNumberish
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;

  market: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        PauseStatusesStructOutput
      ] & {
        totalSupplyAssets: bigint;
        totalSupplyShares: bigint;
        totalBorrowAssets: bigint;
        totalBorrowShares: bigint;
        lastUpdate: bigint;
        fee: bigint;
        pauseStatuses: PauseStatusesStructOutput;
      }
    ],
    "view"
  >;

  marketGovernor: TypedContractMethod<[], [string], "view">;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "payable">;

  nonce: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  position: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [
      [bigint, bigint, bigint] & {
        supplyShares: bigint;
        borrowShares: bigint;
        collateral: bigint;
      }
    ],
    "view"
  >;

  priceOracle: TypedContractMethod<[], [string], "view">;

  protocolGovernor: TypedContractMethod<[], [string], "view">;

  repay: TypedContractMethod<
    [
      marketCreationParams: MarketCreationParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      onBehalf: AddressLike
    ],
    [[bigint, bigint] & { assetsRepaid: bigint; sharesRepaid: bigint }],
    "nonpayable"
  >;

  setApproved: TypedContractMethod<
    [approved: AddressLike, newisApproved: boolean],
    [void],
    "nonpayable"
  >;

  setBorrowRate: TypedContractMethod<
    [marketParams: MarketParamsStruct, newBorrowRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBorrowRateThresholds: TypedContractMethod<
    [
      minBorrowRateThreshold: BigNumberish,
      midBorrowRateThreshold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setDefaultMarketFee: TypedContractMethod<
    [riskTier: BigNumberish, newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFeeRecipient: TypedContractMethod<
    [newFeeRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  setIrmAddress: TypedContractMethod<
    [irm: AddressLike, mode: BigNumberish],
    [void],
    "nonpayable"
  >;

  setIsAddCollateralPaused: TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsAddLiquidityPaused: TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsBorrowPaused: TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsClaimRewardsPaused: TypedContractMethod<
    [isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsLiquidatePaused: TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsPaused: TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsRepayPaused: TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsWithdrawCollateralPaused: TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsWithdrawLiquidityPaused: TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setMarketFee: TypedContractMethod<
    [marketParams: MarketParamsStruct, newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMarketIrm: TypedContractMethod<
    [marketParams: MarketParamsStruct, mode: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMarketLltv: TypedContractMethod<
    [marketParams: MarketParamsStruct, lltv: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPriceOracle: TypedContractMethod<
    [priceOracle_: AddressLike],
    [void],
    "nonpayable"
  >;

  transferGovernance: TypedContractMethod<
    [govToSet: BigNumberish, newGovernor: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawCollateral: TypedContractMethod<
    [
      marketCreationParams: MarketCreationParamsStruct,
      assets: BigNumberish,
      onBehalf: AddressLike,
      receiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  withdrawLiquidity: TypedContractMethod<
    [
      marketCreationParams: MarketCreationParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      onBehalf: AddressLike,
      receiver: AddressLike
    ],
    [[bigint, bigint] & { assetsWithdrawn: bigint; sharesWithdrawn: bigint }],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "accrueInterest"
  ): TypedContractMethod<
    [marketCreationParams: MarketCreationParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addCollateral"
  ): TypedContractMethod<
    [
      marketCreationParams: MarketCreationParamsStruct,
      assets: BigNumberish,
      onBehalf: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [
      marketCreationParams: MarketCreationParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      onBehalf: AddressLike
    ],
    [[bigint, bigint] & { assetsAdded: bigint; sharesMinted: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<
    [
      marketCreationParams: MarketCreationParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      onBehalf: AddressLike,
      receiver: AddressLike
    ],
    [[bigint, bigint] & { assetsBorrowed: bigint; sharesBorrowed: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createMarket"
  ): TypedContractMethod<
    [marketCreationParams: MarketCreationParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fees"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "flashLoan"
  ): TypedContractMethod<
    [token: AddressLike, assets: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCollateralPrice"
  ): TypedContractMethod<
    [collateralToken: AddressLike, loanToken: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getExpectedBorrowAssets"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getExpectedMarketBalances"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getExpectedSupplyAssets"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getExpectedTotalBorrowAssets"
  ): TypedContractMethod<[marketParams: MarketParamsStruct], [bigint], "view">;
  getFunction(
    nameOrSignature: "getExpectedTotalSupplyAssets"
  ): TypedContractMethod<[marketParams: MarketParamsStruct], [bigint], "view">;
  getFunction(
    nameOrSignature: "getExpectedTotalSupplyShares"
  ): TypedContractMethod<[marketParams: MarketParamsStruct], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLltvBounds"
  ): TypedContractMethod<
    [riskTier: BigNumberish],
    [[bigint, bigint] & { min: bigint; max: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMarketBalances"
  ): TypedContractMethod<[id: BytesLike], [MarketStructOutput], "view">;
  getFunction(
    nameOrSignature: "getMarketIdWithMarketCreationParams"
  ): TypedContractMethod<
    [marketCreationParams: MarketCreationParamsStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMarketIdWithMarketParams"
  ): TypedContractMethod<[marketParams: MarketParamsStruct], [string], "view">;
  getFunction(
    nameOrSignature: "getMarketParams"
  ): TypedContractMethod<[id: BytesLike], [MarketParamsStructOutput], "view">;
  getFunction(
    nameOrSignature: "getMarketsCreated"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getPosition"
  ): TypedContractMethod<
    [id: BytesLike, account: AddressLike],
    [
      [bigint, bigint, bigint] & {
        supplyShares: bigint;
        borrowShares: bigint;
        collateral: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "idToMarketParams"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, bigint, string] & {
        loanToken: string;
        collateralToken: string;
        riskTier: bigint;
        lltv: bigint;
        irm: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "irmAddressProvider"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "isApproved"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "liquidate"
  ): TypedContractMethod<
    [
      marketCreationParams: MarketCreationParamsStruct,
      borrower: AddressLike,
      seizedAssets: BigNumberish,
      repaidShares: BigNumberish
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "market"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        PauseStatusesStructOutput
      ] & {
        totalSupplyAssets: bigint;
        totalSupplyShares: bigint;
        totalBorrowAssets: bigint;
        totalBorrowShares: bigint;
        lastUpdate: bigint;
        fee: bigint;
        pauseStatuses: PauseStatusesStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "marketGovernor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "payable">;
  getFunction(
    nameOrSignature: "nonce"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "position"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [
      [bigint, bigint, bigint] & {
        supplyShares: bigint;
        borrowShares: bigint;
        collateral: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "priceOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolGovernor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "repay"
  ): TypedContractMethod<
    [
      marketCreationParams: MarketCreationParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      onBehalf: AddressLike
    ],
    [[bigint, bigint] & { assetsRepaid: bigint; sharesRepaid: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApproved"
  ): TypedContractMethod<
    [approved: AddressLike, newisApproved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBorrowRate"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct, newBorrowRate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBorrowRateThresholds"
  ): TypedContractMethod<
    [
      minBorrowRateThreshold: BigNumberish,
      midBorrowRateThreshold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDefaultMarketFee"
  ): TypedContractMethod<
    [riskTier: BigNumberish, newFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeRecipient"
  ): TypedContractMethod<[newFeeRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIrmAddress"
  ): TypedContractMethod<
    [irm: AddressLike, mode: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsAddCollateralPaused"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsAddLiquidityPaused"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsBorrowPaused"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsClaimRewardsPaused"
  ): TypedContractMethod<[isPaused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIsLiquidatePaused"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsPaused"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsRepayPaused"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsWithdrawCollateralPaused"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsWithdrawLiquidityPaused"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMarketFee"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct, newFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMarketIrm"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct, mode: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMarketLltv"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct, lltv: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPriceOracle"
  ): TypedContractMethod<[priceOracle_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferGovernance"
  ): TypedContractMethod<
    [govToSet: BigNumberish, newGovernor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawCollateral"
  ): TypedContractMethod<
    [
      marketCreationParams: MarketCreationParamsStruct,
      assets: BigNumberish,
      onBehalf: AddressLike,
      receiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawLiquidity"
  ): TypedContractMethod<
    [
      marketCreationParams: MarketCreationParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      onBehalf: AddressLike,
      receiver: AddressLike
    ],
    [[bigint, bigint] & { assetsWithdrawn: bigint; sharesWithdrawn: bigint }],
    "nonpayable"
  >;

  getEvent(
    key: "LogAccrueInterest"
  ): TypedContractEvent<
    LogAccrueInterestEvent.InputTuple,
    LogAccrueInterestEvent.OutputTuple,
    LogAccrueInterestEvent.OutputObject
  >;
  getEvent(
    key: "LogAddCollateral"
  ): TypedContractEvent<
    LogAddCollateralEvent.InputTuple,
    LogAddCollateralEvent.OutputTuple,
    LogAddCollateralEvent.OutputObject
  >;
  getEvent(
    key: "LogAddLiquidity"
  ): TypedContractEvent<
    LogAddLiquidityEvent.InputTuple,
    LogAddLiquidityEvent.OutputTuple,
    LogAddLiquidityEvent.OutputObject
  >;
  getEvent(
    key: "LogBorrow"
  ): TypedContractEvent<
    LogBorrowEvent.InputTuple,
    LogBorrowEvent.OutputTuple,
    LogBorrowEvent.OutputObject
  >;
  getEvent(
    key: "LogCreateMarket"
  ): TypedContractEvent<
    LogCreateMarketEvent.InputTuple,
    LogCreateMarketEvent.OutputTuple,
    LogCreateMarketEvent.OutputObject
  >;
  getEvent(
    key: "LogDefaultFeeChanged"
  ): TypedContractEvent<
    LogDefaultFeeChangedEvent.InputTuple,
    LogDefaultFeeChangedEvent.OutputTuple,
    LogDefaultFeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "LogFeeChanged"
  ): TypedContractEvent<
    LogFeeChangedEvent.InputTuple,
    LogFeeChangedEvent.OutputTuple,
    LogFeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "LogFlashLoan"
  ): TypedContractEvent<
    LogFlashLoanEvent.InputTuple,
    LogFlashLoanEvent.OutputTuple,
    LogFlashLoanEvent.OutputObject
  >;
  getEvent(
    key: "LogIsAddCollateralPausedSet"
  ): TypedContractEvent<
    LogIsAddCollateralPausedSetEvent.InputTuple,
    LogIsAddCollateralPausedSetEvent.OutputTuple,
    LogIsAddCollateralPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "LogIsAddLiquidityPausedSet"
  ): TypedContractEvent<
    LogIsAddLiquidityPausedSetEvent.InputTuple,
    LogIsAddLiquidityPausedSetEvent.OutputTuple,
    LogIsAddLiquidityPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "LogIsBorrowPausedSet"
  ): TypedContractEvent<
    LogIsBorrowPausedSetEvent.InputTuple,
    LogIsBorrowPausedSetEvent.OutputTuple,
    LogIsBorrowPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "LogIsClaimRewardsPausedSet"
  ): TypedContractEvent<
    LogIsClaimRewardsPausedSetEvent.InputTuple,
    LogIsClaimRewardsPausedSetEvent.OutputTuple,
    LogIsClaimRewardsPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "LogIsLiquidatePausedSet"
  ): TypedContractEvent<
    LogIsLiquidatePausedSetEvent.InputTuple,
    LogIsLiquidatePausedSetEvent.OutputTuple,
    LogIsLiquidatePausedSetEvent.OutputObject
  >;
  getEvent(
    key: "LogIsMarketPausedSet"
  ): TypedContractEvent<
    LogIsMarketPausedSetEvent.InputTuple,
    LogIsMarketPausedSetEvent.OutputTuple,
    LogIsMarketPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "LogIsRepayPausedSet"
  ): TypedContractEvent<
    LogIsRepayPausedSetEvent.InputTuple,
    LogIsRepayPausedSetEvent.OutputTuple,
    LogIsRepayPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "LogIsWithdrawCollateralPausedSet"
  ): TypedContractEvent<
    LogIsWithdrawCollateralPausedSetEvent.InputTuple,
    LogIsWithdrawCollateralPausedSetEvent.OutputTuple,
    LogIsWithdrawCollateralPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "LogIsWithdrawLiquidityPausedSet"
  ): TypedContractEvent<
    LogIsWithdrawLiquidityPausedSetEvent.InputTuple,
    LogIsWithdrawLiquidityPausedSetEvent.OutputTuple,
    LogIsWithdrawLiquidityPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "LogLiquidate"
  ): TypedContractEvent<
    LogLiquidateEvent.InputTuple,
    LogLiquidateEvent.OutputTuple,
    LogLiquidateEvent.OutputObject
  >;
  getEvent(
    key: "LogMarketGovernorSet"
  ): TypedContractEvent<
    LogMarketGovernorSetEvent.InputTuple,
    LogMarketGovernorSetEvent.OutputTuple,
    LogMarketGovernorSetEvent.OutputObject
  >;
  getEvent(
    key: "LogPriceOracleSet"
  ): TypedContractEvent<
    LogPriceOracleSetEvent.InputTuple,
    LogPriceOracleSetEvent.OutputTuple,
    LogPriceOracleSetEvent.OutputObject
  >;
  getEvent(
    key: "LogProtocolGovernorSet"
  ): TypedContractEvent<
    LogProtocolGovernorSetEvent.InputTuple,
    LogProtocolGovernorSetEvent.OutputTuple,
    LogProtocolGovernorSetEvent.OutputObject
  >;
  getEvent(
    key: "LogRepay"
  ): TypedContractEvent<
    LogRepayEvent.InputTuple,
    LogRepayEvent.OutputTuple,
    LogRepayEvent.OutputObject
  >;
  getEvent(
    key: "LogSetApproved"
  ): TypedContractEvent<
    LogSetApprovedEvent.InputTuple,
    LogSetApprovedEvent.OutputTuple,
    LogSetApprovedEvent.OutputObject
  >;
  getEvent(
    key: "LogSetFeeRecipient"
  ): TypedContractEvent<
    LogSetFeeRecipientEvent.InputTuple,
    LogSetFeeRecipientEvent.OutputTuple,
    LogSetFeeRecipientEvent.OutputObject
  >;
  getEvent(
    key: "LogSetIRM"
  ): TypedContractEvent<
    LogSetIRMEvent.InputTuple,
    LogSetIRMEvent.OutputTuple,
    LogSetIRMEvent.OutputObject
  >;
  getEvent(
    key: "LogSetLltv"
  ): TypedContractEvent<
    LogSetLltvEvent.InputTuple,
    LogSetLltvEvent.OutputTuple,
    LogSetLltvEvent.OutputObject
  >;
  getEvent(
    key: "LogSetMarketIRM"
  ): TypedContractEvent<
    LogSetMarketIRMEvent.InputTuple,
    LogSetMarketIRMEvent.OutputTuple,
    LogSetMarketIRMEvent.OutputObject
  >;
  getEvent(
    key: "LogWithdrawCollateral"
  ): TypedContractEvent<
    LogWithdrawCollateralEvent.InputTuple,
    LogWithdrawCollateralEvent.OutputTuple,
    LogWithdrawCollateralEvent.OutputObject
  >;
  getEvent(
    key: "LogWithdrawLiquidity"
  ): TypedContractEvent<
    LogWithdrawLiquidityEvent.InputTuple,
    LogWithdrawLiquidityEvent.OutputTuple,
    LogWithdrawLiquidityEvent.OutputObject
  >;

  filters: {
    "LogAccrueInterest(bytes32,uint256,uint256,uint256)": TypedContractEvent<
      LogAccrueInterestEvent.InputTuple,
      LogAccrueInterestEvent.OutputTuple,
      LogAccrueInterestEvent.OutputObject
    >;
    LogAccrueInterest: TypedContractEvent<
      LogAccrueInterestEvent.InputTuple,
      LogAccrueInterestEvent.OutputTuple,
      LogAccrueInterestEvent.OutputObject
    >;

    "LogAddCollateral(bytes32,address,address,uint256)": TypedContractEvent<
      LogAddCollateralEvent.InputTuple,
      LogAddCollateralEvent.OutputTuple,
      LogAddCollateralEvent.OutputObject
    >;
    LogAddCollateral: TypedContractEvent<
      LogAddCollateralEvent.InputTuple,
      LogAddCollateralEvent.OutputTuple,
      LogAddCollateralEvent.OutputObject
    >;

    "LogAddLiquidity(bytes32,address,address,uint256,uint256)": TypedContractEvent<
      LogAddLiquidityEvent.InputTuple,
      LogAddLiquidityEvent.OutputTuple,
      LogAddLiquidityEvent.OutputObject
    >;
    LogAddLiquidity: TypedContractEvent<
      LogAddLiquidityEvent.InputTuple,
      LogAddLiquidityEvent.OutputTuple,
      LogAddLiquidityEvent.OutputObject
    >;

    "LogBorrow(bytes32,address,address,address,uint256,uint256)": TypedContractEvent<
      LogBorrowEvent.InputTuple,
      LogBorrowEvent.OutputTuple,
      LogBorrowEvent.OutputObject
    >;
    LogBorrow: TypedContractEvent<
      LogBorrowEvent.InputTuple,
      LogBorrowEvent.OutputTuple,
      LogBorrowEvent.OutputObject
    >;

    "LogCreateMarket(bytes32,tuple)": TypedContractEvent<
      LogCreateMarketEvent.InputTuple,
      LogCreateMarketEvent.OutputTuple,
      LogCreateMarketEvent.OutputObject
    >;
    LogCreateMarket: TypedContractEvent<
      LogCreateMarketEvent.InputTuple,
      LogCreateMarketEvent.OutputTuple,
      LogCreateMarketEvent.OutputObject
    >;

    "LogDefaultFeeChanged(uint256,uint256)": TypedContractEvent<
      LogDefaultFeeChangedEvent.InputTuple,
      LogDefaultFeeChangedEvent.OutputTuple,
      LogDefaultFeeChangedEvent.OutputObject
    >;
    LogDefaultFeeChanged: TypedContractEvent<
      LogDefaultFeeChangedEvent.InputTuple,
      LogDefaultFeeChangedEvent.OutputTuple,
      LogDefaultFeeChangedEvent.OutputObject
    >;

    "LogFeeChanged(bytes32,uint256)": TypedContractEvent<
      LogFeeChangedEvent.InputTuple,
      LogFeeChangedEvent.OutputTuple,
      LogFeeChangedEvent.OutputObject
    >;
    LogFeeChanged: TypedContractEvent<
      LogFeeChangedEvent.InputTuple,
      LogFeeChangedEvent.OutputTuple,
      LogFeeChangedEvent.OutputObject
    >;

    "LogFlashLoan(address,address,uint256)": TypedContractEvent<
      LogFlashLoanEvent.InputTuple,
      LogFlashLoanEvent.OutputTuple,
      LogFlashLoanEvent.OutputObject
    >;
    LogFlashLoan: TypedContractEvent<
      LogFlashLoanEvent.InputTuple,
      LogFlashLoanEvent.OutputTuple,
      LogFlashLoanEvent.OutputObject
    >;

    "LogIsAddCollateralPausedSet(bytes32,bool)": TypedContractEvent<
      LogIsAddCollateralPausedSetEvent.InputTuple,
      LogIsAddCollateralPausedSetEvent.OutputTuple,
      LogIsAddCollateralPausedSetEvent.OutputObject
    >;
    LogIsAddCollateralPausedSet: TypedContractEvent<
      LogIsAddCollateralPausedSetEvent.InputTuple,
      LogIsAddCollateralPausedSetEvent.OutputTuple,
      LogIsAddCollateralPausedSetEvent.OutputObject
    >;

    "LogIsAddLiquidityPausedSet(bytes32,bool)": TypedContractEvent<
      LogIsAddLiquidityPausedSetEvent.InputTuple,
      LogIsAddLiquidityPausedSetEvent.OutputTuple,
      LogIsAddLiquidityPausedSetEvent.OutputObject
    >;
    LogIsAddLiquidityPausedSet: TypedContractEvent<
      LogIsAddLiquidityPausedSetEvent.InputTuple,
      LogIsAddLiquidityPausedSetEvent.OutputTuple,
      LogIsAddLiquidityPausedSetEvent.OutputObject
    >;

    "LogIsBorrowPausedSet(bytes32,bool)": TypedContractEvent<
      LogIsBorrowPausedSetEvent.InputTuple,
      LogIsBorrowPausedSetEvent.OutputTuple,
      LogIsBorrowPausedSetEvent.OutputObject
    >;
    LogIsBorrowPausedSet: TypedContractEvent<
      LogIsBorrowPausedSetEvent.InputTuple,
      LogIsBorrowPausedSetEvent.OutputTuple,
      LogIsBorrowPausedSetEvent.OutputObject
    >;

    "LogIsClaimRewardsPausedSet(bool)": TypedContractEvent<
      LogIsClaimRewardsPausedSetEvent.InputTuple,
      LogIsClaimRewardsPausedSetEvent.OutputTuple,
      LogIsClaimRewardsPausedSetEvent.OutputObject
    >;
    LogIsClaimRewardsPausedSet: TypedContractEvent<
      LogIsClaimRewardsPausedSetEvent.InputTuple,
      LogIsClaimRewardsPausedSetEvent.OutputTuple,
      LogIsClaimRewardsPausedSetEvent.OutputObject
    >;

    "LogIsLiquidatePausedSet(bytes32,bool)": TypedContractEvent<
      LogIsLiquidatePausedSetEvent.InputTuple,
      LogIsLiquidatePausedSetEvent.OutputTuple,
      LogIsLiquidatePausedSetEvent.OutputObject
    >;
    LogIsLiquidatePausedSet: TypedContractEvent<
      LogIsLiquidatePausedSetEvent.InputTuple,
      LogIsLiquidatePausedSetEvent.OutputTuple,
      LogIsLiquidatePausedSetEvent.OutputObject
    >;

    "LogIsMarketPausedSet(bytes32,bool)": TypedContractEvent<
      LogIsMarketPausedSetEvent.InputTuple,
      LogIsMarketPausedSetEvent.OutputTuple,
      LogIsMarketPausedSetEvent.OutputObject
    >;
    LogIsMarketPausedSet: TypedContractEvent<
      LogIsMarketPausedSetEvent.InputTuple,
      LogIsMarketPausedSetEvent.OutputTuple,
      LogIsMarketPausedSetEvent.OutputObject
    >;

    "LogIsRepayPausedSet(bytes32,bool)": TypedContractEvent<
      LogIsRepayPausedSetEvent.InputTuple,
      LogIsRepayPausedSetEvent.OutputTuple,
      LogIsRepayPausedSetEvent.OutputObject
    >;
    LogIsRepayPausedSet: TypedContractEvent<
      LogIsRepayPausedSetEvent.InputTuple,
      LogIsRepayPausedSetEvent.OutputTuple,
      LogIsRepayPausedSetEvent.OutputObject
    >;

    "LogIsWithdrawCollateralPausedSet(bytes32,bool)": TypedContractEvent<
      LogIsWithdrawCollateralPausedSetEvent.InputTuple,
      LogIsWithdrawCollateralPausedSetEvent.OutputTuple,
      LogIsWithdrawCollateralPausedSetEvent.OutputObject
    >;
    LogIsWithdrawCollateralPausedSet: TypedContractEvent<
      LogIsWithdrawCollateralPausedSetEvent.InputTuple,
      LogIsWithdrawCollateralPausedSetEvent.OutputTuple,
      LogIsWithdrawCollateralPausedSetEvent.OutputObject
    >;

    "LogIsWithdrawLiquidityPausedSet(bytes32,bool)": TypedContractEvent<
      LogIsWithdrawLiquidityPausedSetEvent.InputTuple,
      LogIsWithdrawLiquidityPausedSetEvent.OutputTuple,
      LogIsWithdrawLiquidityPausedSetEvent.OutputObject
    >;
    LogIsWithdrawLiquidityPausedSet: TypedContractEvent<
      LogIsWithdrawLiquidityPausedSetEvent.InputTuple,
      LogIsWithdrawLiquidityPausedSetEvent.OutputTuple,
      LogIsWithdrawLiquidityPausedSetEvent.OutputObject
    >;

    "LogLiquidate(bytes32,address,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      LogLiquidateEvent.InputTuple,
      LogLiquidateEvent.OutputTuple,
      LogLiquidateEvent.OutputObject
    >;
    LogLiquidate: TypedContractEvent<
      LogLiquidateEvent.InputTuple,
      LogLiquidateEvent.OutputTuple,
      LogLiquidateEvent.OutputObject
    >;

    "LogMarketGovernorSet(address,address)": TypedContractEvent<
      LogMarketGovernorSetEvent.InputTuple,
      LogMarketGovernorSetEvent.OutputTuple,
      LogMarketGovernorSetEvent.OutputObject
    >;
    LogMarketGovernorSet: TypedContractEvent<
      LogMarketGovernorSetEvent.InputTuple,
      LogMarketGovernorSetEvent.OutputTuple,
      LogMarketGovernorSetEvent.OutputObject
    >;

    "LogPriceOracleSet(address)": TypedContractEvent<
      LogPriceOracleSetEvent.InputTuple,
      LogPriceOracleSetEvent.OutputTuple,
      LogPriceOracleSetEvent.OutputObject
    >;
    LogPriceOracleSet: TypedContractEvent<
      LogPriceOracleSetEvent.InputTuple,
      LogPriceOracleSetEvent.OutputTuple,
      LogPriceOracleSetEvent.OutputObject
    >;

    "LogProtocolGovernorSet(address,address)": TypedContractEvent<
      LogProtocolGovernorSetEvent.InputTuple,
      LogProtocolGovernorSetEvent.OutputTuple,
      LogProtocolGovernorSetEvent.OutputObject
    >;
    LogProtocolGovernorSet: TypedContractEvent<
      LogProtocolGovernorSetEvent.InputTuple,
      LogProtocolGovernorSetEvent.OutputTuple,
      LogProtocolGovernorSetEvent.OutputObject
    >;

    "LogRepay(bytes32,address,address,uint256,uint256)": TypedContractEvent<
      LogRepayEvent.InputTuple,
      LogRepayEvent.OutputTuple,
      LogRepayEvent.OutputObject
    >;
    LogRepay: TypedContractEvent<
      LogRepayEvent.InputTuple,
      LogRepayEvent.OutputTuple,
      LogRepayEvent.OutputObject
    >;

    "LogSetApproved(address,address,address,bool)": TypedContractEvent<
      LogSetApprovedEvent.InputTuple,
      LogSetApprovedEvent.OutputTuple,
      LogSetApprovedEvent.OutputObject
    >;
    LogSetApproved: TypedContractEvent<
      LogSetApprovedEvent.InputTuple,
      LogSetApprovedEvent.OutputTuple,
      LogSetApprovedEvent.OutputObject
    >;

    "LogSetFeeRecipient(address)": TypedContractEvent<
      LogSetFeeRecipientEvent.InputTuple,
      LogSetFeeRecipientEvent.OutputTuple,
      LogSetFeeRecipientEvent.OutputObject
    >;
    LogSetFeeRecipient: TypedContractEvent<
      LogSetFeeRecipientEvent.InputTuple,
      LogSetFeeRecipientEvent.OutputTuple,
      LogSetFeeRecipientEvent.OutputObject
    >;

    "LogSetIRM(address,uint256)": TypedContractEvent<
      LogSetIRMEvent.InputTuple,
      LogSetIRMEvent.OutputTuple,
      LogSetIRMEvent.OutputObject
    >;
    LogSetIRM: TypedContractEvent<
      LogSetIRMEvent.InputTuple,
      LogSetIRMEvent.OutputTuple,
      LogSetIRMEvent.OutputObject
    >;

    "LogSetLltv(bytes32,uint256)": TypedContractEvent<
      LogSetLltvEvent.InputTuple,
      LogSetLltvEvent.OutputTuple,
      LogSetLltvEvent.OutputObject
    >;
    LogSetLltv: TypedContractEvent<
      LogSetLltvEvent.InputTuple,
      LogSetLltvEvent.OutputTuple,
      LogSetLltvEvent.OutputObject
    >;

    "LogSetMarketIRM(bytes32,uint256)": TypedContractEvent<
      LogSetMarketIRMEvent.InputTuple,
      LogSetMarketIRMEvent.OutputTuple,
      LogSetMarketIRMEvent.OutputObject
    >;
    LogSetMarketIRM: TypedContractEvent<
      LogSetMarketIRMEvent.InputTuple,
      LogSetMarketIRMEvent.OutputTuple,
      LogSetMarketIRMEvent.OutputObject
    >;

    "LogWithdrawCollateral(bytes32,address,address,address,uint256)": TypedContractEvent<
      LogWithdrawCollateralEvent.InputTuple,
      LogWithdrawCollateralEvent.OutputTuple,
      LogWithdrawCollateralEvent.OutputObject
    >;
    LogWithdrawCollateral: TypedContractEvent<
      LogWithdrawCollateralEvent.InputTuple,
      LogWithdrawCollateralEvent.OutputTuple,
      LogWithdrawCollateralEvent.OutputObject
    >;

    "LogWithdrawLiquidity(bytes32,address,address,address,uint256,uint256)": TypedContractEvent<
      LogWithdrawLiquidityEvent.InputTuple,
      LogWithdrawLiquidityEvent.OutputTuple,
      LogWithdrawLiquidityEvent.OutputObject
    >;
    LogWithdrawLiquidity: TypedContractEvent<
      LogWithdrawLiquidityEvent.InputTuple,
      LogWithdrawLiquidityEvent.OutputTuple,
      LogWithdrawLiquidityEvent.OutputObject
    >;
  };
}
