/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export type MarketParamsStruct = {
  loanToken: AddressLike;
  collateralToken: AddressLike;
  riskTier: BigNumberish;
  lltv: BigNumberish;
  irm: AddressLike;
};

export type MarketParamsStructOutput = [
  loanToken: string,
  collateralToken: string,
  riskTier: bigint,
  lltv: bigint,
  irm: string
] & {
  loanToken: string;
  collateralToken: string;
  riskTier: bigint;
  lltv: bigint;
  irm: string;
};

export interface EventsLibInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "LogAccrueInterest"
      | "LogAddCollateral"
      | "LogAddLiquidity"
      | "LogBorrow"
      | "LogCreateMarket"
      | "LogDefaultFeeChanged"
      | "LogEnterMarket"
      | "LogExitMarket"
      | "LogFeeChanged"
      | "LogFlashLoan"
      | "LogIncrementNonce"
      | "LogIsAddCollateralPausedSet"
      | "LogIsAddLiquidityPausedSet"
      | "LogIsBorrowPausedSet"
      | "LogIsClaimRewardsPausedSet"
      | "LogIsLiquidatePausedSet"
      | "LogIsMarketPausedSet"
      | "LogIsRepayPausedSet"
      | "LogIsWithdrawCollateralPausedSet"
      | "LogIsWithdrawLiquidityPausedSet"
      | "LogLiquidate"
      | "LogMarketGovernorSet"
      | "LogPriceOracleSet"
      | "LogProtocolGovernorSet"
      | "LogRepay"
      | "LogSetApproved"
      | "LogSetAuthorization"
      | "LogSetEModeCategoryId"
      | "LogSetFeeRecipient"
      | "LogSetIRM"
      | "LogSetLltv"
      | "LogSetMarketIRM"
      | "LogWithdrawCollateral"
      | "LogWithdrawLiquidity"
  ): EventFragment;
}

export namespace LogAccrueInterestEvent {
  export type InputTuple = [
    id: BytesLike,
    prevBorrowRate: BigNumberish,
    interest: BigNumberish,
    feeShares: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    prevBorrowRate: bigint,
    interest: bigint,
    feeShares: bigint
  ];
  export interface OutputObject {
    id: string;
    prevBorrowRate: bigint;
    interest: bigint;
    feeShares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogAddCollateralEvent {
  export type InputTuple = [
    id: BytesLike,
    caller: AddressLike,
    onBehalf: AddressLike,
    assets: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    caller: string,
    onBehalf: string,
    assets: bigint
  ];
  export interface OutputObject {
    id: string;
    caller: string;
    onBehalf: string;
    assets: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogAddLiquidityEvent {
  export type InputTuple = [
    id: BytesLike,
    caller: AddressLike,
    onBehalf: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    caller: string,
    onBehalf: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    id: string;
    caller: string;
    onBehalf: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogBorrowEvent {
  export type InputTuple = [
    id: BytesLike,
    caller: AddressLike,
    onBehalf: AddressLike,
    receiver: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    caller: string,
    onBehalf: string,
    receiver: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    id: string;
    caller: string;
    onBehalf: string;
    receiver: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogCreateMarketEvent {
  export type InputTuple = [id: BytesLike, marketParams: MarketParamsStruct];
  export type OutputTuple = [
    id: string,
    marketParams: MarketParamsStructOutput
  ];
  export interface OutputObject {
    id: string;
    marketParams: MarketParamsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogDefaultFeeChangedEvent {
  export type InputTuple = [riskTier: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [riskTier: bigint, newFee: bigint];
  export interface OutputObject {
    riskTier: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogEnterMarketEvent {
  export type InputTuple = [id: BytesLike, account: AddressLike];
  export type OutputTuple = [id: string, account: string];
  export interface OutputObject {
    id: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogExitMarketEvent {
  export type InputTuple = [id: BytesLike, account: AddressLike];
  export type OutputTuple = [id: string, account: string];
  export interface OutputObject {
    id: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogFeeChangedEvent {
  export type InputTuple = [id: BytesLike, newFee: BigNumberish];
  export type OutputTuple = [id: string, newFee: bigint];
  export interface OutputObject {
    id: string;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogFlashLoanEvent {
  export type InputTuple = [
    caller: AddressLike,
    token: AddressLike,
    assets: BigNumberish
  ];
  export type OutputTuple = [caller: string, token: string, assets: bigint];
  export interface OutputObject {
    caller: string;
    token: string;
    assets: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogIncrementNonceEvent {
  export type InputTuple = [
    caller: AddressLike,
    owner: AddressLike,
    usedNonce: BigNumberish
  ];
  export type OutputTuple = [caller: string, owner: string, usedNonce: bigint];
  export interface OutputObject {
    caller: string;
    owner: string;
    usedNonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogIsAddCollateralPausedSetEvent {
  export type InputTuple = [id: BytesLike, isPaused: boolean];
  export type OutputTuple = [id: string, isPaused: boolean];
  export interface OutputObject {
    id: string;
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogIsAddLiquidityPausedSetEvent {
  export type InputTuple = [id: BytesLike, isPaused: boolean];
  export type OutputTuple = [id: string, isPaused: boolean];
  export interface OutputObject {
    id: string;
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogIsBorrowPausedSetEvent {
  export type InputTuple = [id: BytesLike, isPaused: boolean];
  export type OutputTuple = [id: string, isPaused: boolean];
  export interface OutputObject {
    id: string;
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogIsClaimRewardsPausedSetEvent {
  export type InputTuple = [isPaused: boolean];
  export type OutputTuple = [isPaused: boolean];
  export interface OutputObject {
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogIsLiquidatePausedSetEvent {
  export type InputTuple = [id: BytesLike, isPaused: boolean];
  export type OutputTuple = [id: string, isPaused: boolean];
  export interface OutputObject {
    id: string;
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogIsMarketPausedSetEvent {
  export type InputTuple = [id: BytesLike, isPaused: boolean];
  export type OutputTuple = [id: string, isPaused: boolean];
  export interface OutputObject {
    id: string;
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogIsRepayPausedSetEvent {
  export type InputTuple = [id: BytesLike, isPaused: boolean];
  export type OutputTuple = [id: string, isPaused: boolean];
  export interface OutputObject {
    id: string;
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogIsWithdrawCollateralPausedSetEvent {
  export type InputTuple = [id: BytesLike, isPaused: boolean];
  export type OutputTuple = [id: string, isPaused: boolean];
  export interface OutputObject {
    id: string;
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogIsWithdrawLiquidityPausedSetEvent {
  export type InputTuple = [id: BytesLike, isPaused: boolean];
  export type OutputTuple = [id: string, isPaused: boolean];
  export interface OutputObject {
    id: string;
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogLiquidateEvent {
  export type InputTuple = [
    id: BytesLike,
    caller: AddressLike,
    borrower: AddressLike,
    repaidAssets: BigNumberish,
    repaidShares: BigNumberish,
    seizedAssets: BigNumberish,
    badDebtAssets: BigNumberish,
    badDebtShares: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    caller: string,
    borrower: string,
    repaidAssets: bigint,
    repaidShares: bigint,
    seizedAssets: bigint,
    badDebtAssets: bigint,
    badDebtShares: bigint
  ];
  export interface OutputObject {
    id: string;
    caller: string;
    borrower: string;
    repaidAssets: bigint;
    repaidShares: bigint;
    seizedAssets: bigint;
    badDebtAssets: bigint;
    badDebtShares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogMarketGovernorSetEvent {
  export type InputTuple = [oldGovernor: AddressLike, newGovernor: AddressLike];
  export type OutputTuple = [oldGovernor: string, newGovernor: string];
  export interface OutputObject {
    oldGovernor: string;
    newGovernor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogPriceOracleSetEvent {
  export type InputTuple = [priceOracle: AddressLike];
  export type OutputTuple = [priceOracle: string];
  export interface OutputObject {
    priceOracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogProtocolGovernorSetEvent {
  export type InputTuple = [oldGovernor: AddressLike, newGovernor: AddressLike];
  export type OutputTuple = [oldGovernor: string, newGovernor: string];
  export interface OutputObject {
    oldGovernor: string;
    newGovernor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogRepayEvent {
  export type InputTuple = [
    id: BytesLike,
    caller: AddressLike,
    onBehalf: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    caller: string,
    onBehalf: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    id: string;
    caller: string;
    onBehalf: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogSetApprovedEvent {
  export type InputTuple = [
    caller: AddressLike,
    owner: AddressLike,
    approved: AddressLike,
    newIsApproved: boolean
  ];
  export type OutputTuple = [
    caller: string,
    owner: string,
    approved: string,
    newIsApproved: boolean
  ];
  export interface OutputObject {
    caller: string;
    owner: string;
    approved: string;
    newIsApproved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogSetAuthorizationEvent {
  export type InputTuple = [
    caller: AddressLike,
    authorizer: AddressLike,
    authorized: AddressLike,
    newIsAuthorized: boolean
  ];
  export type OutputTuple = [
    caller: string,
    authorizer: string,
    authorized: string,
    newIsAuthorized: boolean
  ];
  export interface OutputObject {
    caller: string;
    authorizer: string;
    authorized: string;
    newIsAuthorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogSetEModeCategoryIdEvent {
  export type InputTuple = [eModeCategoryId: BigNumberish];
  export type OutputTuple = [eModeCategoryId: bigint];
  export interface OutputObject {
    eModeCategoryId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogSetFeeRecipientEvent {
  export type InputTuple = [newFeeRecipient: AddressLike];
  export type OutputTuple = [newFeeRecipient: string];
  export interface OutputObject {
    newFeeRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogSetIRMEvent {
  export type InputTuple = [irm: AddressLike, mode: BigNumberish];
  export type OutputTuple = [irm: string, mode: bigint];
  export interface OutputObject {
    irm: string;
    mode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogSetLltvEvent {
  export type InputTuple = [id: BytesLike, lltv: BigNumberish];
  export type OutputTuple = [id: string, lltv: bigint];
  export interface OutputObject {
    id: string;
    lltv: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogSetMarketIRMEvent {
  export type InputTuple = [id: BytesLike, mode: BigNumberish];
  export type OutputTuple = [id: string, mode: bigint];
  export interface OutputObject {
    id: string;
    mode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogWithdrawCollateralEvent {
  export type InputTuple = [
    id: BytesLike,
    caller: AddressLike,
    onBehalf: AddressLike,
    receiver: AddressLike,
    assets: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    caller: string,
    onBehalf: string,
    receiver: string,
    assets: bigint
  ];
  export interface OutputObject {
    id: string;
    caller: string;
    onBehalf: string;
    receiver: string;
    assets: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogWithdrawLiquidityEvent {
  export type InputTuple = [
    id: BytesLike,
    caller: AddressLike,
    onBehalf: AddressLike,
    receiver: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    caller: string,
    onBehalf: string,
    receiver: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    id: string;
    caller: string;
    onBehalf: string;
    receiver: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EventsLib extends BaseContract {
  connect(runner?: ContractRunner | null): EventsLib;
  waitForDeployment(): Promise<this>;

  interface: EventsLibInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "LogAccrueInterest"
  ): TypedContractEvent<
    LogAccrueInterestEvent.InputTuple,
    LogAccrueInterestEvent.OutputTuple,
    LogAccrueInterestEvent.OutputObject
  >;
  getEvent(
    key: "LogAddCollateral"
  ): TypedContractEvent<
    LogAddCollateralEvent.InputTuple,
    LogAddCollateralEvent.OutputTuple,
    LogAddCollateralEvent.OutputObject
  >;
  getEvent(
    key: "LogAddLiquidity"
  ): TypedContractEvent<
    LogAddLiquidityEvent.InputTuple,
    LogAddLiquidityEvent.OutputTuple,
    LogAddLiquidityEvent.OutputObject
  >;
  getEvent(
    key: "LogBorrow"
  ): TypedContractEvent<
    LogBorrowEvent.InputTuple,
    LogBorrowEvent.OutputTuple,
    LogBorrowEvent.OutputObject
  >;
  getEvent(
    key: "LogCreateMarket"
  ): TypedContractEvent<
    LogCreateMarketEvent.InputTuple,
    LogCreateMarketEvent.OutputTuple,
    LogCreateMarketEvent.OutputObject
  >;
  getEvent(
    key: "LogDefaultFeeChanged"
  ): TypedContractEvent<
    LogDefaultFeeChangedEvent.InputTuple,
    LogDefaultFeeChangedEvent.OutputTuple,
    LogDefaultFeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "LogEnterMarket"
  ): TypedContractEvent<
    LogEnterMarketEvent.InputTuple,
    LogEnterMarketEvent.OutputTuple,
    LogEnterMarketEvent.OutputObject
  >;
  getEvent(
    key: "LogExitMarket"
  ): TypedContractEvent<
    LogExitMarketEvent.InputTuple,
    LogExitMarketEvent.OutputTuple,
    LogExitMarketEvent.OutputObject
  >;
  getEvent(
    key: "LogFeeChanged"
  ): TypedContractEvent<
    LogFeeChangedEvent.InputTuple,
    LogFeeChangedEvent.OutputTuple,
    LogFeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "LogFlashLoan"
  ): TypedContractEvent<
    LogFlashLoanEvent.InputTuple,
    LogFlashLoanEvent.OutputTuple,
    LogFlashLoanEvent.OutputObject
  >;
  getEvent(
    key: "LogIncrementNonce"
  ): TypedContractEvent<
    LogIncrementNonceEvent.InputTuple,
    LogIncrementNonceEvent.OutputTuple,
    LogIncrementNonceEvent.OutputObject
  >;
  getEvent(
    key: "LogIsAddCollateralPausedSet"
  ): TypedContractEvent<
    LogIsAddCollateralPausedSetEvent.InputTuple,
    LogIsAddCollateralPausedSetEvent.OutputTuple,
    LogIsAddCollateralPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "LogIsAddLiquidityPausedSet"
  ): TypedContractEvent<
    LogIsAddLiquidityPausedSetEvent.InputTuple,
    LogIsAddLiquidityPausedSetEvent.OutputTuple,
    LogIsAddLiquidityPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "LogIsBorrowPausedSet"
  ): TypedContractEvent<
    LogIsBorrowPausedSetEvent.InputTuple,
    LogIsBorrowPausedSetEvent.OutputTuple,
    LogIsBorrowPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "LogIsClaimRewardsPausedSet"
  ): TypedContractEvent<
    LogIsClaimRewardsPausedSetEvent.InputTuple,
    LogIsClaimRewardsPausedSetEvent.OutputTuple,
    LogIsClaimRewardsPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "LogIsLiquidatePausedSet"
  ): TypedContractEvent<
    LogIsLiquidatePausedSetEvent.InputTuple,
    LogIsLiquidatePausedSetEvent.OutputTuple,
    LogIsLiquidatePausedSetEvent.OutputObject
  >;
  getEvent(
    key: "LogIsMarketPausedSet"
  ): TypedContractEvent<
    LogIsMarketPausedSetEvent.InputTuple,
    LogIsMarketPausedSetEvent.OutputTuple,
    LogIsMarketPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "LogIsRepayPausedSet"
  ): TypedContractEvent<
    LogIsRepayPausedSetEvent.InputTuple,
    LogIsRepayPausedSetEvent.OutputTuple,
    LogIsRepayPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "LogIsWithdrawCollateralPausedSet"
  ): TypedContractEvent<
    LogIsWithdrawCollateralPausedSetEvent.InputTuple,
    LogIsWithdrawCollateralPausedSetEvent.OutputTuple,
    LogIsWithdrawCollateralPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "LogIsWithdrawLiquidityPausedSet"
  ): TypedContractEvent<
    LogIsWithdrawLiquidityPausedSetEvent.InputTuple,
    LogIsWithdrawLiquidityPausedSetEvent.OutputTuple,
    LogIsWithdrawLiquidityPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "LogLiquidate"
  ): TypedContractEvent<
    LogLiquidateEvent.InputTuple,
    LogLiquidateEvent.OutputTuple,
    LogLiquidateEvent.OutputObject
  >;
  getEvent(
    key: "LogMarketGovernorSet"
  ): TypedContractEvent<
    LogMarketGovernorSetEvent.InputTuple,
    LogMarketGovernorSetEvent.OutputTuple,
    LogMarketGovernorSetEvent.OutputObject
  >;
  getEvent(
    key: "LogPriceOracleSet"
  ): TypedContractEvent<
    LogPriceOracleSetEvent.InputTuple,
    LogPriceOracleSetEvent.OutputTuple,
    LogPriceOracleSetEvent.OutputObject
  >;
  getEvent(
    key: "LogProtocolGovernorSet"
  ): TypedContractEvent<
    LogProtocolGovernorSetEvent.InputTuple,
    LogProtocolGovernorSetEvent.OutputTuple,
    LogProtocolGovernorSetEvent.OutputObject
  >;
  getEvent(
    key: "LogRepay"
  ): TypedContractEvent<
    LogRepayEvent.InputTuple,
    LogRepayEvent.OutputTuple,
    LogRepayEvent.OutputObject
  >;
  getEvent(
    key: "LogSetApproved"
  ): TypedContractEvent<
    LogSetApprovedEvent.InputTuple,
    LogSetApprovedEvent.OutputTuple,
    LogSetApprovedEvent.OutputObject
  >;
  getEvent(
    key: "LogSetAuthorization"
  ): TypedContractEvent<
    LogSetAuthorizationEvent.InputTuple,
    LogSetAuthorizationEvent.OutputTuple,
    LogSetAuthorizationEvent.OutputObject
  >;
  getEvent(
    key: "LogSetEModeCategoryId"
  ): TypedContractEvent<
    LogSetEModeCategoryIdEvent.InputTuple,
    LogSetEModeCategoryIdEvent.OutputTuple,
    LogSetEModeCategoryIdEvent.OutputObject
  >;
  getEvent(
    key: "LogSetFeeRecipient"
  ): TypedContractEvent<
    LogSetFeeRecipientEvent.InputTuple,
    LogSetFeeRecipientEvent.OutputTuple,
    LogSetFeeRecipientEvent.OutputObject
  >;
  getEvent(
    key: "LogSetIRM"
  ): TypedContractEvent<
    LogSetIRMEvent.InputTuple,
    LogSetIRMEvent.OutputTuple,
    LogSetIRMEvent.OutputObject
  >;
  getEvent(
    key: "LogSetLltv"
  ): TypedContractEvent<
    LogSetLltvEvent.InputTuple,
    LogSetLltvEvent.OutputTuple,
    LogSetLltvEvent.OutputObject
  >;
  getEvent(
    key: "LogSetMarketIRM"
  ): TypedContractEvent<
    LogSetMarketIRMEvent.InputTuple,
    LogSetMarketIRMEvent.OutputTuple,
    LogSetMarketIRMEvent.OutputObject
  >;
  getEvent(
    key: "LogWithdrawCollateral"
  ): TypedContractEvent<
    LogWithdrawCollateralEvent.InputTuple,
    LogWithdrawCollateralEvent.OutputTuple,
    LogWithdrawCollateralEvent.OutputObject
  >;
  getEvent(
    key: "LogWithdrawLiquidity"
  ): TypedContractEvent<
    LogWithdrawLiquidityEvent.InputTuple,
    LogWithdrawLiquidityEvent.OutputTuple,
    LogWithdrawLiquidityEvent.OutputObject
  >;

  filters: {
    "LogAccrueInterest(bytes32,uint256,uint256,uint256)": TypedContractEvent<
      LogAccrueInterestEvent.InputTuple,
      LogAccrueInterestEvent.OutputTuple,
      LogAccrueInterestEvent.OutputObject
    >;
    LogAccrueInterest: TypedContractEvent<
      LogAccrueInterestEvent.InputTuple,
      LogAccrueInterestEvent.OutputTuple,
      LogAccrueInterestEvent.OutputObject
    >;

    "LogAddCollateral(bytes32,address,address,uint256)": TypedContractEvent<
      LogAddCollateralEvent.InputTuple,
      LogAddCollateralEvent.OutputTuple,
      LogAddCollateralEvent.OutputObject
    >;
    LogAddCollateral: TypedContractEvent<
      LogAddCollateralEvent.InputTuple,
      LogAddCollateralEvent.OutputTuple,
      LogAddCollateralEvent.OutputObject
    >;

    "LogAddLiquidity(bytes32,address,address,uint256,uint256)": TypedContractEvent<
      LogAddLiquidityEvent.InputTuple,
      LogAddLiquidityEvent.OutputTuple,
      LogAddLiquidityEvent.OutputObject
    >;
    LogAddLiquidity: TypedContractEvent<
      LogAddLiquidityEvent.InputTuple,
      LogAddLiquidityEvent.OutputTuple,
      LogAddLiquidityEvent.OutputObject
    >;

    "LogBorrow(bytes32,address,address,address,uint256,uint256)": TypedContractEvent<
      LogBorrowEvent.InputTuple,
      LogBorrowEvent.OutputTuple,
      LogBorrowEvent.OutputObject
    >;
    LogBorrow: TypedContractEvent<
      LogBorrowEvent.InputTuple,
      LogBorrowEvent.OutputTuple,
      LogBorrowEvent.OutputObject
    >;

    "LogCreateMarket(bytes32,tuple)": TypedContractEvent<
      LogCreateMarketEvent.InputTuple,
      LogCreateMarketEvent.OutputTuple,
      LogCreateMarketEvent.OutputObject
    >;
    LogCreateMarket: TypedContractEvent<
      LogCreateMarketEvent.InputTuple,
      LogCreateMarketEvent.OutputTuple,
      LogCreateMarketEvent.OutputObject
    >;

    "LogDefaultFeeChanged(uint256,uint256)": TypedContractEvent<
      LogDefaultFeeChangedEvent.InputTuple,
      LogDefaultFeeChangedEvent.OutputTuple,
      LogDefaultFeeChangedEvent.OutputObject
    >;
    LogDefaultFeeChanged: TypedContractEvent<
      LogDefaultFeeChangedEvent.InputTuple,
      LogDefaultFeeChangedEvent.OutputTuple,
      LogDefaultFeeChangedEvent.OutputObject
    >;

    "LogEnterMarket(bytes32,address)": TypedContractEvent<
      LogEnterMarketEvent.InputTuple,
      LogEnterMarketEvent.OutputTuple,
      LogEnterMarketEvent.OutputObject
    >;
    LogEnterMarket: TypedContractEvent<
      LogEnterMarketEvent.InputTuple,
      LogEnterMarketEvent.OutputTuple,
      LogEnterMarketEvent.OutputObject
    >;

    "LogExitMarket(bytes32,address)": TypedContractEvent<
      LogExitMarketEvent.InputTuple,
      LogExitMarketEvent.OutputTuple,
      LogExitMarketEvent.OutputObject
    >;
    LogExitMarket: TypedContractEvent<
      LogExitMarketEvent.InputTuple,
      LogExitMarketEvent.OutputTuple,
      LogExitMarketEvent.OutputObject
    >;

    "LogFeeChanged(bytes32,uint256)": TypedContractEvent<
      LogFeeChangedEvent.InputTuple,
      LogFeeChangedEvent.OutputTuple,
      LogFeeChangedEvent.OutputObject
    >;
    LogFeeChanged: TypedContractEvent<
      LogFeeChangedEvent.InputTuple,
      LogFeeChangedEvent.OutputTuple,
      LogFeeChangedEvent.OutputObject
    >;

    "LogFlashLoan(address,address,uint256)": TypedContractEvent<
      LogFlashLoanEvent.InputTuple,
      LogFlashLoanEvent.OutputTuple,
      LogFlashLoanEvent.OutputObject
    >;
    LogFlashLoan: TypedContractEvent<
      LogFlashLoanEvent.InputTuple,
      LogFlashLoanEvent.OutputTuple,
      LogFlashLoanEvent.OutputObject
    >;

    "LogIncrementNonce(address,address,uint256)": TypedContractEvent<
      LogIncrementNonceEvent.InputTuple,
      LogIncrementNonceEvent.OutputTuple,
      LogIncrementNonceEvent.OutputObject
    >;
    LogIncrementNonce: TypedContractEvent<
      LogIncrementNonceEvent.InputTuple,
      LogIncrementNonceEvent.OutputTuple,
      LogIncrementNonceEvent.OutputObject
    >;

    "LogIsAddCollateralPausedSet(bytes32,bool)": TypedContractEvent<
      LogIsAddCollateralPausedSetEvent.InputTuple,
      LogIsAddCollateralPausedSetEvent.OutputTuple,
      LogIsAddCollateralPausedSetEvent.OutputObject
    >;
    LogIsAddCollateralPausedSet: TypedContractEvent<
      LogIsAddCollateralPausedSetEvent.InputTuple,
      LogIsAddCollateralPausedSetEvent.OutputTuple,
      LogIsAddCollateralPausedSetEvent.OutputObject
    >;

    "LogIsAddLiquidityPausedSet(bytes32,bool)": TypedContractEvent<
      LogIsAddLiquidityPausedSetEvent.InputTuple,
      LogIsAddLiquidityPausedSetEvent.OutputTuple,
      LogIsAddLiquidityPausedSetEvent.OutputObject
    >;
    LogIsAddLiquidityPausedSet: TypedContractEvent<
      LogIsAddLiquidityPausedSetEvent.InputTuple,
      LogIsAddLiquidityPausedSetEvent.OutputTuple,
      LogIsAddLiquidityPausedSetEvent.OutputObject
    >;

    "LogIsBorrowPausedSet(bytes32,bool)": TypedContractEvent<
      LogIsBorrowPausedSetEvent.InputTuple,
      LogIsBorrowPausedSetEvent.OutputTuple,
      LogIsBorrowPausedSetEvent.OutputObject
    >;
    LogIsBorrowPausedSet: TypedContractEvent<
      LogIsBorrowPausedSetEvent.InputTuple,
      LogIsBorrowPausedSetEvent.OutputTuple,
      LogIsBorrowPausedSetEvent.OutputObject
    >;

    "LogIsClaimRewardsPausedSet(bool)": TypedContractEvent<
      LogIsClaimRewardsPausedSetEvent.InputTuple,
      LogIsClaimRewardsPausedSetEvent.OutputTuple,
      LogIsClaimRewardsPausedSetEvent.OutputObject
    >;
    LogIsClaimRewardsPausedSet: TypedContractEvent<
      LogIsClaimRewardsPausedSetEvent.InputTuple,
      LogIsClaimRewardsPausedSetEvent.OutputTuple,
      LogIsClaimRewardsPausedSetEvent.OutputObject
    >;

    "LogIsLiquidatePausedSet(bytes32,bool)": TypedContractEvent<
      LogIsLiquidatePausedSetEvent.InputTuple,
      LogIsLiquidatePausedSetEvent.OutputTuple,
      LogIsLiquidatePausedSetEvent.OutputObject
    >;
    LogIsLiquidatePausedSet: TypedContractEvent<
      LogIsLiquidatePausedSetEvent.InputTuple,
      LogIsLiquidatePausedSetEvent.OutputTuple,
      LogIsLiquidatePausedSetEvent.OutputObject
    >;

    "LogIsMarketPausedSet(bytes32,bool)": TypedContractEvent<
      LogIsMarketPausedSetEvent.InputTuple,
      LogIsMarketPausedSetEvent.OutputTuple,
      LogIsMarketPausedSetEvent.OutputObject
    >;
    LogIsMarketPausedSet: TypedContractEvent<
      LogIsMarketPausedSetEvent.InputTuple,
      LogIsMarketPausedSetEvent.OutputTuple,
      LogIsMarketPausedSetEvent.OutputObject
    >;

    "LogIsRepayPausedSet(bytes32,bool)": TypedContractEvent<
      LogIsRepayPausedSetEvent.InputTuple,
      LogIsRepayPausedSetEvent.OutputTuple,
      LogIsRepayPausedSetEvent.OutputObject
    >;
    LogIsRepayPausedSet: TypedContractEvent<
      LogIsRepayPausedSetEvent.InputTuple,
      LogIsRepayPausedSetEvent.OutputTuple,
      LogIsRepayPausedSetEvent.OutputObject
    >;

    "LogIsWithdrawCollateralPausedSet(bytes32,bool)": TypedContractEvent<
      LogIsWithdrawCollateralPausedSetEvent.InputTuple,
      LogIsWithdrawCollateralPausedSetEvent.OutputTuple,
      LogIsWithdrawCollateralPausedSetEvent.OutputObject
    >;
    LogIsWithdrawCollateralPausedSet: TypedContractEvent<
      LogIsWithdrawCollateralPausedSetEvent.InputTuple,
      LogIsWithdrawCollateralPausedSetEvent.OutputTuple,
      LogIsWithdrawCollateralPausedSetEvent.OutputObject
    >;

    "LogIsWithdrawLiquidityPausedSet(bytes32,bool)": TypedContractEvent<
      LogIsWithdrawLiquidityPausedSetEvent.InputTuple,
      LogIsWithdrawLiquidityPausedSetEvent.OutputTuple,
      LogIsWithdrawLiquidityPausedSetEvent.OutputObject
    >;
    LogIsWithdrawLiquidityPausedSet: TypedContractEvent<
      LogIsWithdrawLiquidityPausedSetEvent.InputTuple,
      LogIsWithdrawLiquidityPausedSetEvent.OutputTuple,
      LogIsWithdrawLiquidityPausedSetEvent.OutputObject
    >;

    "LogLiquidate(bytes32,address,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      LogLiquidateEvent.InputTuple,
      LogLiquidateEvent.OutputTuple,
      LogLiquidateEvent.OutputObject
    >;
    LogLiquidate: TypedContractEvent<
      LogLiquidateEvent.InputTuple,
      LogLiquidateEvent.OutputTuple,
      LogLiquidateEvent.OutputObject
    >;

    "LogMarketGovernorSet(address,address)": TypedContractEvent<
      LogMarketGovernorSetEvent.InputTuple,
      LogMarketGovernorSetEvent.OutputTuple,
      LogMarketGovernorSetEvent.OutputObject
    >;
    LogMarketGovernorSet: TypedContractEvent<
      LogMarketGovernorSetEvent.InputTuple,
      LogMarketGovernorSetEvent.OutputTuple,
      LogMarketGovernorSetEvent.OutputObject
    >;

    "LogPriceOracleSet(address)": TypedContractEvent<
      LogPriceOracleSetEvent.InputTuple,
      LogPriceOracleSetEvent.OutputTuple,
      LogPriceOracleSetEvent.OutputObject
    >;
    LogPriceOracleSet: TypedContractEvent<
      LogPriceOracleSetEvent.InputTuple,
      LogPriceOracleSetEvent.OutputTuple,
      LogPriceOracleSetEvent.OutputObject
    >;

    "LogProtocolGovernorSet(address,address)": TypedContractEvent<
      LogProtocolGovernorSetEvent.InputTuple,
      LogProtocolGovernorSetEvent.OutputTuple,
      LogProtocolGovernorSetEvent.OutputObject
    >;
    LogProtocolGovernorSet: TypedContractEvent<
      LogProtocolGovernorSetEvent.InputTuple,
      LogProtocolGovernorSetEvent.OutputTuple,
      LogProtocolGovernorSetEvent.OutputObject
    >;

    "LogRepay(bytes32,address,address,uint256,uint256)": TypedContractEvent<
      LogRepayEvent.InputTuple,
      LogRepayEvent.OutputTuple,
      LogRepayEvent.OutputObject
    >;
    LogRepay: TypedContractEvent<
      LogRepayEvent.InputTuple,
      LogRepayEvent.OutputTuple,
      LogRepayEvent.OutputObject
    >;

    "LogSetApproved(address,address,address,bool)": TypedContractEvent<
      LogSetApprovedEvent.InputTuple,
      LogSetApprovedEvent.OutputTuple,
      LogSetApprovedEvent.OutputObject
    >;
    LogSetApproved: TypedContractEvent<
      LogSetApprovedEvent.InputTuple,
      LogSetApprovedEvent.OutputTuple,
      LogSetApprovedEvent.OutputObject
    >;

    "LogSetAuthorization(address,address,address,bool)": TypedContractEvent<
      LogSetAuthorizationEvent.InputTuple,
      LogSetAuthorizationEvent.OutputTuple,
      LogSetAuthorizationEvent.OutputObject
    >;
    LogSetAuthorization: TypedContractEvent<
      LogSetAuthorizationEvent.InputTuple,
      LogSetAuthorizationEvent.OutputTuple,
      LogSetAuthorizationEvent.OutputObject
    >;

    "LogSetEModeCategoryId(uint256)": TypedContractEvent<
      LogSetEModeCategoryIdEvent.InputTuple,
      LogSetEModeCategoryIdEvent.OutputTuple,
      LogSetEModeCategoryIdEvent.OutputObject
    >;
    LogSetEModeCategoryId: TypedContractEvent<
      LogSetEModeCategoryIdEvent.InputTuple,
      LogSetEModeCategoryIdEvent.OutputTuple,
      LogSetEModeCategoryIdEvent.OutputObject
    >;

    "LogSetFeeRecipient(address)": TypedContractEvent<
      LogSetFeeRecipientEvent.InputTuple,
      LogSetFeeRecipientEvent.OutputTuple,
      LogSetFeeRecipientEvent.OutputObject
    >;
    LogSetFeeRecipient: TypedContractEvent<
      LogSetFeeRecipientEvent.InputTuple,
      LogSetFeeRecipientEvent.OutputTuple,
      LogSetFeeRecipientEvent.OutputObject
    >;

    "LogSetIRM(address,uint256)": TypedContractEvent<
      LogSetIRMEvent.InputTuple,
      LogSetIRMEvent.OutputTuple,
      LogSetIRMEvent.OutputObject
    >;
    LogSetIRM: TypedContractEvent<
      LogSetIRMEvent.InputTuple,
      LogSetIRMEvent.OutputTuple,
      LogSetIRMEvent.OutputObject
    >;

    "LogSetLltv(bytes32,uint256)": TypedContractEvent<
      LogSetLltvEvent.InputTuple,
      LogSetLltvEvent.OutputTuple,
      LogSetLltvEvent.OutputObject
    >;
    LogSetLltv: TypedContractEvent<
      LogSetLltvEvent.InputTuple,
      LogSetLltvEvent.OutputTuple,
      LogSetLltvEvent.OutputObject
    >;

    "LogSetMarketIRM(bytes32,uint256)": TypedContractEvent<
      LogSetMarketIRMEvent.InputTuple,
      LogSetMarketIRMEvent.OutputTuple,
      LogSetMarketIRMEvent.OutputObject
    >;
    LogSetMarketIRM: TypedContractEvent<
      LogSetMarketIRMEvent.InputTuple,
      LogSetMarketIRMEvent.OutputTuple,
      LogSetMarketIRMEvent.OutputObject
    >;

    "LogWithdrawCollateral(bytes32,address,address,address,uint256)": TypedContractEvent<
      LogWithdrawCollateralEvent.InputTuple,
      LogWithdrawCollateralEvent.OutputTuple,
      LogWithdrawCollateralEvent.OutputObject
    >;
    LogWithdrawCollateral: TypedContractEvent<
      LogWithdrawCollateralEvent.InputTuple,
      LogWithdrawCollateralEvent.OutputTuple,
      LogWithdrawCollateralEvent.OutputObject
    >;

    "LogWithdrawLiquidity(bytes32,address,address,address,uint256,uint256)": TypedContractEvent<
      LogWithdrawLiquidityEvent.InputTuple,
      LogWithdrawLiquidityEvent.OutputTuple,
      LogWithdrawLiquidityEvent.OutputObject
    >;
    LogWithdrawLiquidity: TypedContractEvent<
      LogWithdrawLiquidityEvent.InputTuple,
      LogWithdrawLiquidityEvent.OutputTuple,
      LogWithdrawLiquidityEvent.OutputObject
    >;
  };
}
