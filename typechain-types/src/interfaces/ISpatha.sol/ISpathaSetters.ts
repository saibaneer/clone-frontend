/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type MarketParamsStruct = {
  loanToken: AddressLike;
  collateralToken: AddressLike;
  riskTier: BigNumberish;
  lltv: BigNumberish;
  irm: AddressLike;
};

export type MarketParamsStructOutput = [
  loanToken: string,
  collateralToken: string,
  riskTier: bigint,
  lltv: bigint,
  irm: string
] & {
  loanToken: string;
  collateralToken: string;
  riskTier: bigint;
  lltv: bigint;
  irm: string;
};

export interface ISpathaSettersInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "setApproved"
      | "setBorrowRateThresholds"
      | "setDefaultMarketFee"
      | "setFeeRecipient"
      | "setIrmAddress"
      | "setIsAddCollateralPaused"
      | "setIsAddLiquidityPaused"
      | "setIsBorrowPaused"
      | "setIsClaimRewardsPaused"
      | "setIsLiquidatePaused"
      | "setIsPaused"
      | "setIsRepayPaused"
      | "setIsWithdrawCollateralPaused"
      | "setIsWithdrawLiquidityPaused"
      | "setMarketFee"
      | "setMarketIrm"
      | "setMarketLltv"
      | "setPriceOracle"
      | "transferGovernance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "setApproved",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowRateThresholds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultMarketFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setIrmAddress",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsAddCollateralPaused",
    values: [MarketParamsStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsAddLiquidityPaused",
    values: [MarketParamsStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsBorrowPaused",
    values: [MarketParamsStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsClaimRewardsPaused",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsLiquidatePaused",
    values: [MarketParamsStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsPaused",
    values: [MarketParamsStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsRepayPaused",
    values: [MarketParamsStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsWithdrawCollateralPaused",
    values: [MarketParamsStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsWithdrawLiquidityPaused",
    values: [MarketParamsStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketFee",
    values: [MarketParamsStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketIrm",
    values: [MarketParamsStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketLltv",
    values: [MarketParamsStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferGovernance",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "setApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowRateThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultMarketFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIrmAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsAddCollateralPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsAddLiquidityPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsBorrowPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsClaimRewardsPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsLiquidatePaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsRepayPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsWithdrawCollateralPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsWithdrawLiquidityPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketIrm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketLltv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferGovernance",
    data: BytesLike
  ): Result;
}

export interface ISpathaSetters extends BaseContract {
  connect(runner?: ContractRunner | null): ISpathaSetters;
  waitForDeployment(): Promise<this>;

  interface: ISpathaSettersInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  setApproved: TypedContractMethod<
    [approved: AddressLike, newisApproved: boolean],
    [void],
    "nonpayable"
  >;

  setBorrowRateThresholds: TypedContractMethod<
    [
      minBorrowRateThreshold: BigNumberish,
      midBorrowRateThreshold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setDefaultMarketFee: TypedContractMethod<
    [riskTier: BigNumberish, newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFeeRecipient: TypedContractMethod<
    [newFeeRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  setIrmAddress: TypedContractMethod<
    [irm: AddressLike, mode: BigNumberish],
    [void],
    "nonpayable"
  >;

  setIsAddCollateralPaused: TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsAddLiquidityPaused: TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsBorrowPaused: TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsClaimRewardsPaused: TypedContractMethod<
    [isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsLiquidatePaused: TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsPaused: TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsRepayPaused: TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsWithdrawCollateralPaused: TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsWithdrawLiquidityPaused: TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setMarketFee: TypedContractMethod<
    [marketParams: MarketParamsStruct, newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMarketIrm: TypedContractMethod<
    [marketParams: MarketParamsStruct, mode: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMarketLltv: TypedContractMethod<
    [marketParams: MarketParamsStruct, lltv: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPriceOracle: TypedContractMethod<
    [priceOracle_: AddressLike],
    [void],
    "nonpayable"
  >;

  transferGovernance: TypedContractMethod<
    [govToSet: BigNumberish, newGovernor: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "setApproved"
  ): TypedContractMethod<
    [approved: AddressLike, newisApproved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBorrowRateThresholds"
  ): TypedContractMethod<
    [
      minBorrowRateThreshold: BigNumberish,
      midBorrowRateThreshold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDefaultMarketFee"
  ): TypedContractMethod<
    [riskTier: BigNumberish, newFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeRecipient"
  ): TypedContractMethod<[newFeeRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIrmAddress"
  ): TypedContractMethod<
    [irm: AddressLike, mode: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsAddCollateralPaused"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsAddLiquidityPaused"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsBorrowPaused"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsClaimRewardsPaused"
  ): TypedContractMethod<[isPaused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIsLiquidatePaused"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsPaused"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsRepayPaused"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsWithdrawCollateralPaused"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsWithdrawLiquidityPaused"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct, isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMarketFee"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct, newFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMarketIrm"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct, mode: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMarketLltv"
  ): TypedContractMethod<
    [marketParams: MarketParamsStruct, lltv: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPriceOracle"
  ): TypedContractMethod<[priceOracle_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferGovernance"
  ): TypedContractMethod<
    [govToSet: BigNumberish, newGovernor: AddressLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
