/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type MarketCreationParamsStruct = {
  loanToken: AddressLike;
  collateralToken: AddressLike;
  riskTier: BigNumberish;
};

export type MarketCreationParamsStructOutput = [
  loanToken: string,
  collateralToken: string,
  riskTier: bigint
] & { loanToken: string; collateralToken: string; riskTier: bigint };

export interface ISpathaInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accrueInterest"
      | "addCollateral"
      | "addLiquidity"
      | "borrow"
      | "createMarket"
      | "flashLoan"
      | "liquidate"
      | "repay"
      | "withdrawCollateral"
      | "withdrawLiquidity"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accrueInterest",
    values: [MarketCreationParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "addCollateral",
    values: [MarketCreationParamsStruct, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      MarketCreationParamsStruct,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [
      MarketCreationParamsStruct,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarket",
    values: [MarketCreationParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [
      MarketCreationParamsStruct,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [
      MarketCreationParamsStruct,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [MarketCreationParamsStruct, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidity",
    values: [
      MarketCreationParamsStruct,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "accrueInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;
}

export interface ISpatha extends BaseContract {
  connect(runner?: ContractRunner | null): ISpatha;
  waitForDeployment(): Promise<this>;

  interface: ISpathaInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accrueInterest: TypedContractMethod<
    [marketCreationParams: MarketCreationParamsStruct],
    [void],
    "nonpayable"
  >;

  addCollateral: TypedContractMethod<
    [
      marketCreationParams: MarketCreationParamsStruct,
      assets: BigNumberish,
      onBehalf: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  addLiquidity: TypedContractMethod<
    [
      marketCreationParams: MarketCreationParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      onBehalf: AddressLike
    ],
    [[bigint, bigint] & { assetsAdded: bigint; sharesMinted: bigint }],
    "nonpayable"
  >;

  borrow: TypedContractMethod<
    [
      marketCreationParams: MarketCreationParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      onBehalf: AddressLike,
      receiver: AddressLike
    ],
    [[bigint, bigint] & { assetsBorrowed: bigint; sharesBorrowed: bigint }],
    "nonpayable"
  >;

  createMarket: TypedContractMethod<
    [marketCreationParams: MarketCreationParamsStruct],
    [void],
    "nonpayable"
  >;

  flashLoan: TypedContractMethod<
    [token: AddressLike, assets: BigNumberish],
    [void],
    "nonpayable"
  >;

  liquidate: TypedContractMethod<
    [
      marketCreationParams: MarketCreationParamsStruct,
      borrower: AddressLike,
      seizedAssets: BigNumberish,
      repaidShares: BigNumberish
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;

  repay: TypedContractMethod<
    [
      marketCreationParams: MarketCreationParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      onBehalf: AddressLike
    ],
    [[bigint, bigint] & { assetsRepaid: bigint; sharesRepaid: bigint }],
    "nonpayable"
  >;

  withdrawCollateral: TypedContractMethod<
    [
      marketCreationParams: MarketCreationParamsStruct,
      assets: BigNumberish,
      onBehalf: AddressLike,
      receiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  withdrawLiquidity: TypedContractMethod<
    [
      marketCreationParams: MarketCreationParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      onBehalf: AddressLike,
      receiver: AddressLike
    ],
    [[bigint, bigint] & { assetsWithdrawn: bigint; sharesWithdrawn: bigint }],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accrueInterest"
  ): TypedContractMethod<
    [marketCreationParams: MarketCreationParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addCollateral"
  ): TypedContractMethod<
    [
      marketCreationParams: MarketCreationParamsStruct,
      assets: BigNumberish,
      onBehalf: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [
      marketCreationParams: MarketCreationParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      onBehalf: AddressLike
    ],
    [[bigint, bigint] & { assetsAdded: bigint; sharesMinted: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<
    [
      marketCreationParams: MarketCreationParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      onBehalf: AddressLike,
      receiver: AddressLike
    ],
    [[bigint, bigint] & { assetsBorrowed: bigint; sharesBorrowed: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createMarket"
  ): TypedContractMethod<
    [marketCreationParams: MarketCreationParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "flashLoan"
  ): TypedContractMethod<
    [token: AddressLike, assets: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidate"
  ): TypedContractMethod<
    [
      marketCreationParams: MarketCreationParamsStruct,
      borrower: AddressLike,
      seizedAssets: BigNumberish,
      repaidShares: BigNumberish
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repay"
  ): TypedContractMethod<
    [
      marketCreationParams: MarketCreationParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      onBehalf: AddressLike
    ],
    [[bigint, bigint] & { assetsRepaid: bigint; sharesRepaid: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawCollateral"
  ): TypedContractMethod<
    [
      marketCreationParams: MarketCreationParamsStruct,
      assets: BigNumberish,
      onBehalf: AddressLike,
      receiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawLiquidity"
  ): TypedContractMethod<
    [
      marketCreationParams: MarketCreationParamsStruct,
      assets: BigNumberish,
      shares: BigNumberish,
      onBehalf: AddressLike,
      receiver: AddressLike
    ],
    [[bigint, bigint] & { assetsWithdrawn: bigint; sharesWithdrawn: bigint }],
    "nonpayable"
  >;

  filters: {};
}
