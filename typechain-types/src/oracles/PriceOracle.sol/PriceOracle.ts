/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface PriceOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASE_CURRENCY"
      | "BASE_CURRENCY_UNIT"
      | "getAssetPrice"
      | "getAssetPriceSource"
      | "getAssetsPrices"
      | "getFallbackOracle"
      | "getTokenDecimals"
      | "governor"
      | "price"
      | "setAssetPriceSources"
      | "setFallbackOracle"
      | "transferGovernance"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LogAssetPriceSourceUpdated"
      | "LogBaseCurrencySet"
      | "LogFallbackOracleUpdated"
      | "LogGovernorSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASE_CURRENCY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BASE_CURRENCY_UNIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetPriceSource",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetsPrices",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getFallbackOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenDecimals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "price",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetPriceSources",
    values: [AddressLike[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setFallbackOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferGovernance",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASE_CURRENCY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BASE_CURRENCY_UNIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetPriceSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetsPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFallbackOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAssetPriceSources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFallbackOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferGovernance",
    data: BytesLike
  ): Result;
}

export namespace LogAssetPriceSourceUpdatedEvent {
  export type InputTuple = [asset: AddressLike, source: AddressLike];
  export type OutputTuple = [asset: string, source: string];
  export interface OutputObject {
    asset: string;
    source: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogBaseCurrencySetEvent {
  export type InputTuple = [
    baseCurrency: AddressLike,
    baseCurrencyUnit: BigNumberish
  ];
  export type OutputTuple = [baseCurrency: string, baseCurrencyUnit: bigint];
  export interface OutputObject {
    baseCurrency: string;
    baseCurrencyUnit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogFallbackOracleUpdatedEvent {
  export type InputTuple = [fallbackOracle: AddressLike];
  export type OutputTuple = [fallbackOracle: string];
  export interface OutputObject {
    fallbackOracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogGovernorSetEvent {
  export type InputTuple = [oldGovernor: AddressLike, newGovernor: AddressLike];
  export type OutputTuple = [oldGovernor: string, newGovernor: string];
  export interface OutputObject {
    oldGovernor: string;
    newGovernor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PriceOracle extends BaseContract {
  connect(runner?: ContractRunner | null): PriceOracle;
  waitForDeployment(): Promise<this>;

  interface: PriceOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASE_CURRENCY: TypedContractMethod<[], [string], "view">;

  BASE_CURRENCY_UNIT: TypedContractMethod<[], [bigint], "view">;

  getAssetPrice: TypedContractMethod<[asset: AddressLike], [bigint], "view">;

  getAssetPriceSource: TypedContractMethod<
    [asset: AddressLike],
    [string],
    "view"
  >;

  getAssetsPrices: TypedContractMethod<
    [assets: AddressLike[]],
    [bigint[]],
    "view"
  >;

  getFallbackOracle: TypedContractMethod<[], [string], "view">;

  getTokenDecimals: TypedContractMethod<
    [tokenAddress: AddressLike],
    [bigint],
    "view"
  >;

  governor: TypedContractMethod<[], [string], "view">;

  price: TypedContractMethod<
    [collateralToken: AddressLike, loanToken: AddressLike],
    [bigint],
    "view"
  >;

  setAssetPriceSources: TypedContractMethod<
    [assets: AddressLike[], sources: AddressLike[]],
    [void],
    "nonpayable"
  >;

  setFallbackOracle: TypedContractMethod<
    [fallbackOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  transferGovernance: TypedContractMethod<
    [newGovernor: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASE_CURRENCY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BASE_CURRENCY_UNIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAssetPrice"
  ): TypedContractMethod<[asset: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAssetPriceSource"
  ): TypedContractMethod<[asset: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getAssetsPrices"
  ): TypedContractMethod<[assets: AddressLike[]], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getFallbackOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenDecimals"
  ): TypedContractMethod<[tokenAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "governor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "price"
  ): TypedContractMethod<
    [collateralToken: AddressLike, loanToken: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "setAssetPriceSources"
  ): TypedContractMethod<
    [assets: AddressLike[], sources: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFallbackOracle"
  ): TypedContractMethod<[fallbackOracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferGovernance"
  ): TypedContractMethod<[newGovernor: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "LogAssetPriceSourceUpdated"
  ): TypedContractEvent<
    LogAssetPriceSourceUpdatedEvent.InputTuple,
    LogAssetPriceSourceUpdatedEvent.OutputTuple,
    LogAssetPriceSourceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LogBaseCurrencySet"
  ): TypedContractEvent<
    LogBaseCurrencySetEvent.InputTuple,
    LogBaseCurrencySetEvent.OutputTuple,
    LogBaseCurrencySetEvent.OutputObject
  >;
  getEvent(
    key: "LogFallbackOracleUpdated"
  ): TypedContractEvent<
    LogFallbackOracleUpdatedEvent.InputTuple,
    LogFallbackOracleUpdatedEvent.OutputTuple,
    LogFallbackOracleUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LogGovernorSet"
  ): TypedContractEvent<
    LogGovernorSetEvent.InputTuple,
    LogGovernorSetEvent.OutputTuple,
    LogGovernorSetEvent.OutputObject
  >;

  filters: {
    "LogAssetPriceSourceUpdated(address,address)": TypedContractEvent<
      LogAssetPriceSourceUpdatedEvent.InputTuple,
      LogAssetPriceSourceUpdatedEvent.OutputTuple,
      LogAssetPriceSourceUpdatedEvent.OutputObject
    >;
    LogAssetPriceSourceUpdated: TypedContractEvent<
      LogAssetPriceSourceUpdatedEvent.InputTuple,
      LogAssetPriceSourceUpdatedEvent.OutputTuple,
      LogAssetPriceSourceUpdatedEvent.OutputObject
    >;

    "LogBaseCurrencySet(address,uint256)": TypedContractEvent<
      LogBaseCurrencySetEvent.InputTuple,
      LogBaseCurrencySetEvent.OutputTuple,
      LogBaseCurrencySetEvent.OutputObject
    >;
    LogBaseCurrencySet: TypedContractEvent<
      LogBaseCurrencySetEvent.InputTuple,
      LogBaseCurrencySetEvent.OutputTuple,
      LogBaseCurrencySetEvent.OutputObject
    >;

    "LogFallbackOracleUpdated(address)": TypedContractEvent<
      LogFallbackOracleUpdatedEvent.InputTuple,
      LogFallbackOracleUpdatedEvent.OutputTuple,
      LogFallbackOracleUpdatedEvent.OutputObject
    >;
    LogFallbackOracleUpdated: TypedContractEvent<
      LogFallbackOracleUpdatedEvent.InputTuple,
      LogFallbackOracleUpdatedEvent.OutputTuple,
      LogFallbackOracleUpdatedEvent.OutputObject
    >;

    "LogGovernorSet(address,address)": TypedContractEvent<
      LogGovernorSetEvent.InputTuple,
      LogGovernorSetEvent.OutputTuple,
      LogGovernorSetEvent.OutputObject
    >;
    LogGovernorSet: TypedContractEvent<
      LogGovernorSetEvent.InputTuple,
      LogGovernorSetEvent.OutputTuple,
      LogGovernorSetEvent.OutputObject
    >;
  };
}
