/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface RolesAuthorityInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "canCall"
      | "doesRoleHaveCapability"
      | "doesUserHaveRole"
      | "getRolesWithCapability"
      | "getUserRoles"
      | "isCapabilityPublic"
      | "owner"
      | "setOwner"
      | "setPublicCapability"
      | "setRoleCapability"
      | "setUserRole"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnerUpdated"
      | "PublicCapabilityUpdated"
      | "RoleCapabilityUpdated"
      | "UserRoleUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "canCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "doesRoleHaveCapability",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "doesUserHaveRole",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRolesWithCapability",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRoles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCapabilityPublic",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicCapability",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleCapability",
    values: [BigNumberish, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserRole",
    values: [AddressLike, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "canCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "doesRoleHaveCapability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doesUserHaveRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRolesWithCapability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCapabilityPublic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPublicCapability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoleCapability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserRole",
    data: BytesLike
  ): Result;
}

export namespace OwnerUpdatedEvent {
  export type InputTuple = [user: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [user: string, newOwner: string];
  export interface OutputObject {
    user: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublicCapabilityUpdatedEvent {
  export type InputTuple = [functionSig: BytesLike, enabled: boolean];
  export type OutputTuple = [functionSig: string, enabled: boolean];
  export interface OutputObject {
    functionSig: string;
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleCapabilityUpdatedEvent {
  export type InputTuple = [
    role: BigNumberish,
    functionSig: BytesLike,
    enabled: boolean
  ];
  export type OutputTuple = [
    role: bigint,
    functionSig: string,
    enabled: boolean
  ];
  export interface OutputObject {
    role: bigint;
    functionSig: string;
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserRoleUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    role: BigNumberish,
    enabled: boolean
  ];
  export type OutputTuple = [user: string, role: bigint, enabled: boolean];
  export interface OutputObject {
    user: string;
    role: bigint;
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RolesAuthority extends BaseContract {
  connect(runner?: ContractRunner | null): RolesAuthority;
  waitForDeployment(): Promise<this>;

  interface: RolesAuthorityInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  canCall: TypedContractMethod<
    [user: AddressLike, functionSig: BytesLike],
    [boolean],
    "view"
  >;

  doesRoleHaveCapability: TypedContractMethod<
    [role: BigNumberish, functionSig: BytesLike],
    [boolean],
    "view"
  >;

  doesUserHaveRole: TypedContractMethod<
    [user: AddressLike, role: BigNumberish],
    [boolean],
    "view"
  >;

  getRolesWithCapability: TypedContractMethod<
    [arg0: BytesLike],
    [string],
    "view"
  >;

  getUserRoles: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  isCapabilityPublic: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  setOwner: TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  setPublicCapability: TypedContractMethod<
    [functionSig: BytesLike, enabled: boolean],
    [void],
    "nonpayable"
  >;

  setRoleCapability: TypedContractMethod<
    [role: BigNumberish, functionSig: BytesLike, enabled: boolean],
    [void],
    "nonpayable"
  >;

  setUserRole: TypedContractMethod<
    [user: AddressLike, role: BigNumberish, enabled: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "canCall"
  ): TypedContractMethod<
    [user: AddressLike, functionSig: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "doesRoleHaveCapability"
  ): TypedContractMethod<
    [role: BigNumberish, functionSig: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "doesUserHaveRole"
  ): TypedContractMethod<
    [user: AddressLike, role: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRolesWithCapability"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUserRoles"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "isCapabilityPublic"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPublicCapability"
  ): TypedContractMethod<
    [functionSig: BytesLike, enabled: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRoleCapability"
  ): TypedContractMethod<
    [role: BigNumberish, functionSig: BytesLike, enabled: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUserRole"
  ): TypedContractMethod<
    [user: AddressLike, role: BigNumberish, enabled: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OwnerUpdated"
  ): TypedContractEvent<
    OwnerUpdatedEvent.InputTuple,
    OwnerUpdatedEvent.OutputTuple,
    OwnerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PublicCapabilityUpdated"
  ): TypedContractEvent<
    PublicCapabilityUpdatedEvent.InputTuple,
    PublicCapabilityUpdatedEvent.OutputTuple,
    PublicCapabilityUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleCapabilityUpdated"
  ): TypedContractEvent<
    RoleCapabilityUpdatedEvent.InputTuple,
    RoleCapabilityUpdatedEvent.OutputTuple,
    RoleCapabilityUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UserRoleUpdated"
  ): TypedContractEvent<
    UserRoleUpdatedEvent.InputTuple,
    UserRoleUpdatedEvent.OutputTuple,
    UserRoleUpdatedEvent.OutputObject
  >;

  filters: {
    "OwnerUpdated(address,address)": TypedContractEvent<
      OwnerUpdatedEvent.InputTuple,
      OwnerUpdatedEvent.OutputTuple,
      OwnerUpdatedEvent.OutputObject
    >;
    OwnerUpdated: TypedContractEvent<
      OwnerUpdatedEvent.InputTuple,
      OwnerUpdatedEvent.OutputTuple,
      OwnerUpdatedEvent.OutputObject
    >;

    "PublicCapabilityUpdated(bytes4,bool)": TypedContractEvent<
      PublicCapabilityUpdatedEvent.InputTuple,
      PublicCapabilityUpdatedEvent.OutputTuple,
      PublicCapabilityUpdatedEvent.OutputObject
    >;
    PublicCapabilityUpdated: TypedContractEvent<
      PublicCapabilityUpdatedEvent.InputTuple,
      PublicCapabilityUpdatedEvent.OutputTuple,
      PublicCapabilityUpdatedEvent.OutputObject
    >;

    "RoleCapabilityUpdated(uint8,bytes4,bool)": TypedContractEvent<
      RoleCapabilityUpdatedEvent.InputTuple,
      RoleCapabilityUpdatedEvent.OutputTuple,
      RoleCapabilityUpdatedEvent.OutputObject
    >;
    RoleCapabilityUpdated: TypedContractEvent<
      RoleCapabilityUpdatedEvent.InputTuple,
      RoleCapabilityUpdatedEvent.OutputTuple,
      RoleCapabilityUpdatedEvent.OutputObject
    >;

    "UserRoleUpdated(address,uint8,bool)": TypedContractEvent<
      UserRoleUpdatedEvent.InputTuple,
      UserRoleUpdatedEvent.OutputTuple,
      UserRoleUpdatedEvent.OutputObject
    >;
    UserRoleUpdated: TypedContractEvent<
      UserRoleUpdatedEvent.InputTuple,
      UserRoleUpdatedEvent.OutputTuple,
      UserRoleUpdatedEvent.OutputObject
    >;
  };
}
